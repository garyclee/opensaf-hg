#!/usr/bin/env python

import select
import datetime
import argparse

from pyosaf.utils import immom, immoi
from pyosaf.utils.immoi.implementer import Implementer
from pyosaf.utils.immom.object import ImmObject

class_name = "TimeSample"
dn         = "timeId=1"
timeout    = 1

def get_time():
    now = datetime.datetime.now()

    return (now.hour, now.minute, now.second)

def select_loop(implementer):

    # Get selection object for the implementer
    selection_object = implementer.get_selection_object()

    # Wait for next OI event or one second timeout
    inputs  = [selection_object]
    outputs = []

    while inputs:

        readable, writable, exceptional = \
        select.select(inputs, outputs, inputs, timeout)

        if selection_object in readable:
            implementer.dispatch()
        else:

            # Update the time
            (hours, minutes, seconds) = get_time()

            attributes = {'hours'   : hours,
                          'minutes' : minutes,
                          'seconds' : seconds}

            implementer.update_runtime_attributes(dn, attributes)

if __name__ == '__main__':

    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='Keeps the %s object updated with the current time' % dn)

    parser.parse_args()

    # Create the implementer instance
    time_implementer = Implementer(name="TimeReporter")

    # Get the current time
    (hours, minutes, seconds) = get_time()

    # Create the time instance if it doesn't exist
    try:
        obj = ImmObject(class_name=class_name, dn=dn)

        obj.hours   = hours
        obj.minutes = minutes
        obj.seconds = seconds
        obj.timeId  = "timeId=1"

        time_implementer.create(obj)
    except Exception as err:
        pass

    # Start dispatch and time update loop
    select_loop(time_implementer)
