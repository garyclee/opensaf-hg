#!/usr/bin/env python

import argparse
import sys
import netifaces
import select

from pyosaf.saAis import eSaAisErrorT

from pyosaf.utils import immom, immoi

from pyosaf.utils.immom.object import ImmObject
from pyosaf.utils.immom.iterator import InstanceIterator


from pyosaf.utils.immoi import get_object_no_runtime
from pyosaf.utils.immoi.implementer import Implementer

interface_class_name = "InterfaceRO01"
timeout = 1

def get_interface_name_from_dn(dn):

    return dn.split(',')[0].split('=')[1]

def create_rt_object_for_interface(implementer, interface):

    mo = ImmObject(class_name=interface_class_name, dn='interfaceId=%s' % interface)

    # Set the RDN with the right interface name
    mo.interfaceId = 'interfaceId=%s' % interface

    # Look up the IPv4 and IPv6 addresses
    addresses = netifaces.ifaddresses(interface)

    mo.ipv4Addresses = None
    mo.ipv6Addresses = None

    if netifaces.AF_INET in addresses:
        ipv4 = [a['addr'] for a in addresses[netifaces.AF_INET]]
        mo.ipv4Addresses = ipv4
    else:
        mo.ipv4Addresses = "dummy"

    if netifaces.AF_INET6 in addresses:
        ipv6 = [a['addr'] for a in addresses[netifaces.AF_INET6]]
        mo.ipv6Addresses = ipv6
    else:
        mo.ipv6Addresses = "dummy"

    ##
    ## This exposes a potential fault in IMM.
    ##
    ## Cached attributes need to have their values set when 
    ## the object is created. If there is an interface that lacks
    ## an IPv4 or IPv6 address, this will be set to None and 
    ## converted to an empty list in the implementer code. IMM
    ## does not allow this and responds with SA_AIS_ERR_INVALID_PARAM
    ##

    implementer.create(mo)

def select_loop(implementer):

    # Get selection object for the implementer
    selection_object = implementer.get_selection_object()

    # Wait for next IO event or N seconds
    inputs  = [selection_object]
    outputs = []

    while inputs:

        readable, writable, exceptional = \
        select.select(inputs, outputs, inputs, timeout)

        if selection_object in readable:
            implementer.dispatch()
        else:

            interfaces = netifaces.interfaces()

            # Add objects for new interfaces
            for interface in interfaces:

                try:
                    create_rt_object_for_interface(implementer, interface)
                except Exception as err:
                    pass

            # Go through existing objects
            for mo in InstanceIterator('InterfaceRO01'):
                interface_name = get_interface_name_from_dn(mo.dn)

                # Remove objects for deleted interfaces
                if not mo.interfaceId.split('=')[1] in interfaces:
                    implementer.delete(mo.dn)

                    continue

                # Update interfaces
                addresses = netifaces.ifaddresses(interface_name)

                attributes = {}

                if netifaces.AF_INET in addresses:
                    attributes['ipv4Addresses'] = \
                            [a['addr'] for a in addresses[netifaces.AF_INET]]

                if netifaces.AF_INET6 in addresses:
                    attributes['ipv6Addresses'] = \
                            [a['addr'] for a in addresses[netifaces.AF_INET6]]

                if attributes:
                    implementer.update_runtime_attributes(mo.dn, attributes)


if __name__ == "__main__":

    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='''Creates a runtime object per network interface on the machine and populates the ipv4Addresses and ipv6Addresses attributes.

Use like this:

$ interface-handler &

$ immfind -c InterfaceRO01
''', formatter_class=argparse.RawTextHelpFormatter)

    parser.parse_args()

    # Create the implementer instance
    interface_implementer = Implementer(name="InterfaceImplementer")

    # Enter an infinite select loop
    select_loop(interface_implementer)
