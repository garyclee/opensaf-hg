/*      -*- OpenSAF  -*-
 *
 * (C) Copyright 2008 The OpenSAF Foundation
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
 * under the GNU Lesser General Public License Version 2.1, February 1999.
 * The complete license can be accessed from the following location:
 * http://opensource.org/licenses/lgpl-license.php
 * See the Copying file included with the OpenSAF distribution for full
 * licensing terms.
 *
 * Author(s): Emerson Network Power
 *
 */

/*****************************************************************************

  DESCRIPTION:

  This module contains logging/tracing functions for PSSv.

******************************************************************************
*/

/*
 * Module Inclusion Control...
 */
#ifndef PSR_LOG_H
#define PSR_LOG_H

#include "gl_defs.h"
#include "ncs_mds_def.h"
#include "mab_penv.h"
#include "dta_papi.h"

/******************************************************************************
 Logging offset indexes for Headline logging
 ******************************************************************************/
typedef enum pss_hdln_flex
{
    PSS_HDLN_TBL_ALREADY_REG,
    PSS_HDLN_TBL_ID_TOO_LARGE,
    PSS_HDLN_TBL_DESC_NULL,
    PSS_HDLN_ENTER_WBREQ_HNDLR_FUNC,
    PSS_HDLN_EXIT_WBREQ_HNDLR_FUNC,
    PSS_HDLN_START_OD_PLAYBACK,
    PSS_HDLN_END_OD_PLAYBACK,
    PSS_HDLN_WARMBOOT_TBL_ERR,
    PSS_HDLN_REQUEST_PROCESS_ERR,
    PSS_HDLN_RECEIVED_CLI_REQ,
    PSS_HDLN_SAVE_CURR_CONF,
    PSS_HDLN_TBL_BIND_PROCESS_ERR,
    PSS_HDLN_TBL_UNBIND_PROCESS_ERR,
    PSS_HDLN_MIB_REQ_FAILED,
    PSS_HDLN_MIB_REQ_SUCCEEDED,
    PSS_HDLN_MIB_REQ_RSP_IS_NOT_SUCCESS,
    PSS_HDLN_MIB_REQ_RETURN_NO_SUCH_TBL,
    PSS_HDLN_MIB_REQ_RSP_NOT_SET,
    PSS_HDLN_MIB_REQ_RSP_NOT_SETROW,
    PSS_HDLN_MIB_REQ_RSP_NOT_SETALLROWS,
    PSS_HDLN_MIB_REQ_RSP_NOT_REMOVEROWS,
    PSS_HDLN_PLAYBACK_TBL_ERR,
    PSS_HDLN_PLAYBACK_CHG_ERR,
    PSS_HDLN_PLAYBACK_ADD_ERR,
    PSS_HDLN_SAVE_TBL_ERROR,
    PSS_HDLN_LMCBFNC_NULL,
    PSS_HDLN_PSSTS_API_NULL,
    PSS_HDLN_NCSMIBTM_INIT_ERR,
    PSS_HDLN_PSSTS_CONFIG_ERR,
    PSS_HDLN_FILE_CREATE_FAIL,
    PSS_HDLN_INVALID_MIB_DATA,
    PSS_HDLN_ENTRY_FOUND,
    PSS_HDLN_ENTRY_NOT_FOUND,
    PSS_HDLN_OAC_DATA_DELETING,
    PSS_HDLN_OAC_DATA_DELETED,
    PSS_HDLN_CLI_INV_TBL,
    PSS_HDLN_SAVE_CURR_CONF_DONE,
    PSS_HDLN_PROCESS_DIFFQ_START,
    PSS_HDLN_PROCESS_DIFFQ_END,
    PSS_HDLN_SAVE_TO_STORE_START,
    PSS_HDLN_SAVE_TO_STORE_END,
    PSS_HDLN_SET_EXST_PRO,
    PSS_HDLN_SET_NEW_PRO,
    PSS_HDLN_SET_CUR_PRO,
    PSS_HDLN_CLI_REQ_NOOP,
    PSS_HDLN_CLI_REQ_LOAD,
    PSS_HDLN_CLI_REQ_SAVE,
    PSS_HDLN_CLI_REQ_COPY,
    PSS_HDLN_CLI_REQ_RENAME,
    PSS_HDLN_CLI_REQ_INVALID,
    PSS_HDLN_OAC_REG_SUCCESS,
    PSS_HDLN_OAC_REG_FAILURE,
    PSS_HDLN_NULL_INST,
    PSS_HDLN_NULL_SNMP,
    PSS_HDLN_NULL_USRBUF,
    PSS_HDLN_INVALID_PWE_HDL,
    PSS_HDLN_MAC_PBKS_SUCCESS,
    PSS_HDLN_MAC_PBKS_FAILURE,
    PSS_HDLN_MAC_PBKE_SUCCESS,
    PSS_HDLN_MAC_PBKE_FAILURE,
    PSS_HDLN_OAC_PBKS_SUCCESS,
    PSS_HDLN_OAC_PBKS_FAILURE,
    PSS_HDLN_OAC_PBKE_SUCCESS,
    PSS_HDLN_OAC_PBKE_FAILURE,
    PSS_HDLN_PAT_TREE_FAILURE,
    PSS_HDLN_SPCN_LIST_FILE_OPEN_FAIL,
    PSS_HDLN_SPCN_LIST_FILE_OPEN_IN_APPEND_MODE_FAIL,
    PSS_HDLN_SPCN_ADD_OP_FAIL,
    PSS_HDLN_LIB_CONF_FILE_OPEN_FAIL,
    PSS_HDLN_CLIENT_ENTRY_NULL,
    PSS_HDLN_CLIENT_ENTRY_ADD_FAIL,
    PSS_HDLN_WBSORTDB_INIT_FAIL,
    PSS_HDLN_WBSORTDB_ADD_ENTRY_FAIL,
    PSS_HDLN_WBPLBCK_SORT_OP_FAIL,
    PSS_HDLN_ODSORTDB_INIT_FAIL,
    PSS_HDLN_ODPLBCK_OP_FAIL,
    PSS_HDLN_ODSORTDB_ADD_ENTRY_FAIL,
    PSS_HDLN_OAA_ENTRY_ADD_FAIL,
    PSS_HDLN_SNMP_REQ_FRM_INV_MDS_DEST_RCVD,
    PSS_HDLN_TBL_BIND_RCVD_FROM_MDSDEST,
    PSS_HDLN_TBL_BIND_FND_TBL_REC_ALREADY_FOR_MDSDEST,
    PSS_HDLN_TBL_REC_NOT_FND,
    PSS_HDLN_NULL_TBL_BIND,
    PSS_HDLN_TBL_BIND_FAIL,
    PSS_HDLN_TBL_BIND_INVLD_PWE_HDL,
    PSS_HDLN_TBL_BIND_SUCCESS,
    PSS_HDLN_TBL_REC_PATTREE_INIT_FAIL,
    PSS_HDLN_TBL_UNBIND_FAIL,
    PSS_HDLN_TBL_UNBIND_OAA_CLT_NODE_NOT_FOUND,
    PSS_HDLN_TBL_UNBIND_PCN_NODE_NOT_FOUND,
    PSS_HDLN_TBL_UNBIND_INVLD_PWE_HDL,
    PSS_HDLN_TBL_REC_ADD_FAIL,

    PSS_HDLN_STR,
    PSS_HDLN_AMF_INITIALIZE_SUCCESS, 
#if 0
    PSS_HDLN_AMF_HLTH_CHK_START_SUCCESS,
#endif
    PSS_HDLN_AMF_HLTH_DOING_AWESOME, 
    PSS_HDLN_AMF_HLTH_DOING_AWFUL,
    PSS_HDLN_AMF_CSI_DETAILS,
    PSS_HDLN_AMF_CSI_ADD_ONE_SUCCESS, 
    PSS_HDLN_AMF_CSI_STATE_CHG_SUCCESS, 
    PSS_HDLN_AMF_CSI_STATE_CHG_FAILED, 
    PSS_HDLN_AMF_CSI_REMOVE_SUCCESS, 
    PSS_HDLN_AMF_CSI_REMOVE_ALL_SUCCESS,
    PSS_HDLN_CREATE_SUCCESS, 
    PSS_HDLN_TGT_SVCS_CREATE_SUCCESS, 
    PSS_HDLN_TGT_SVCS_DESTROY_SUCCESS, 
    PSS_HDLN_DEF_ENV_INIT_SUCCESS, 
    PSS_HDLN_MAA_REL_INST_SUCCESS, 
    PSS_HDLN_MDS_REL_INST_SUCCESS, 
    PSS_HDLN_PWE_CB_OAA_TREE_DESTROY_SUCCESS, 
    PSS_HDLN_PWE_CB_CLNT_TREE_DESTROY_SUCCESS, 
    PSS_HDLN_PWE_CB_DESTROY_SUCCESS, 
    PSS_HDLN_AMF_CSI_ATTRIB_DECODE_SUCCESS,
    PSS_HDLN_MAS_MDS_UP,
    PSS_HDLN_MAS_MDS_DOWN,
    PSS_HDLN_BAM_MDS_UP,
    PSS_HDLN_BAM_MDS_DOWN,
    PSS_HDLN_INVALID_PROFILE_SPCFD,
    PSS_HDLN_GET_PROF_CLIENTS_OP_FAILED,
    PSS_HDLN_AMF_SIGNAL_RCVD,
    PSS_HDLN_AMF_COMP_MSG_SENT,
    PSS_HDLN_INVLD_CONF_DONE_MSG_RCVD,
    PSS_HDLN_INVLD_PCN_IN_WBREQ_TERMINATING_SESSION,
    PSS_HDLN_SPCN_ENTRY_FOUND,
    PSS_HDLN_PCN_NODE_FOUND,
    PSS_HDLN_PCN_NODE_NOT_FOUND,
    PSS_HDLN_FWDING_REQ_TO_BAM,
    PSS_PWE_CB_TAKE_HANDLE_IN_MBCSVCB_FAILED,
    PSS_HDLN_RE_PCN_ADD_FAIL,
    PSS_HDLN_RE_OAA_TREE_ADD_FAIL,
    PSS_HDLN_RE_TBL_REC_ADD_FAIL,
    PSS_HDLN_RE_TBL_REC_ADD_SUCCESS,
    PSS_HDLN_MBCSV_INITIALIZE_FAIL,
    PSS_HDLN_MBCSV_FINALIZE_FAIL,
    PSS_HDLN_MBCSV_FINALIZE_SUCCESS,
    PSS_HDLN_MBCSV_SET_OP_FAIL,
    PSS_HDLN_MBCSV_SET_OP_SUCCESS,
    PSS_HDLN_MBCSV_OPEN_FAIL,
    PSS_HDLN_MBCSV_OPEN_SUCCESS,
    PSS_HDLN_MBCSV_CLOSE_FAIL,
    PSS_HDLN_MBCSV_CLOSE_SUCCESS,
    PSS_HDLN_MBCSV_DISPATCH_FAIL,
    PSS_HDLN_MBCSV_DISPATCH_SUCCESS,
    PSS_HDLN_MBCSV_CB_NULL_ARG_PTR,
    PSS_HDLN_MBCSV_CB_INVOKED,
    PSS_HDLN_MBCSV_ENC_CB_INVOKED,
    PSS_HDLN_MBCSV_DEC_CB_INVOKED,
    PSS_HDLN_MBCSV_PERR_INFO_CB_INVOKED,
    PSS_HDLN_MBCSV_NOTIFY_CB_INVOKED,
    PSS_HDLN_MBCSV_ERR_IND_CB_INVOKED,
    PSS_HDLN_MBCSV_CB_INVLD_OP_PASSED,
    PSS_HDLN_MBCSV_GET_SELECT_OBJ_FAIL,
    PSS_HDLN_MBCSV_GET_SELECT_OBJ_SUCCESS,
    PSS_HDLN_CKPT_STATE,
    PSS_HDLN_INVLD_ENC_MSG_TYPE,
    PSS_HDLN_INVLD_DEC_MSG_TYPE,
    PSS_HDLN_ASYNC_UPDATE_ENC_STATUS,
    PSS_HDLN_ASYNC_UPDATE_ENC_STARTED,
    PSS_HDLN_COLD_SYNC_REQ_ENC_DONE,
    PSS_HDLN_COLD_SYNC_RESP_ENC_FAIL,
    PSS_HDLN_COLD_SYNC_RESP_ENC_STARTED,
    PSS_HDLN_COLD_SYNC_RESP_ENC_SUCCESS,
    PSS_HDLN_COLD_SYNC_RESP_ENC_IN_NON_ACTIVE_ROLE,
    PSS_HDLN_WARM_SYNC_REQ_ENC_DONE,
    PSS_HDLN_WARM_SYNC_RESP_ENC_STARTED,
    PSS_HDLN_WARM_SYNC_RESP_ENC_FAIL,
    PSS_HDLN_WARM_SYNC_RESP_ENC_SUCCESS,
    PSS_HDLN_WARM_SYNC_RESP_ENC_IN_NON_ACTIVE_ROLE,
    PSS_HDLN_DATA_REQ_ENC_IN_NON_STANDBY_ROLE,
    PSS_HDLN_DATA_RESP_ENC_STARTED,
    PSS_HDLN_DATA_RESP_ENC_FAIL,
    PSS_HDLN_DATA_RESP_ENC_SUCCESS,
    PSS_HDLN_DATA_RESP_ENC_IN_NON_ACTIVE_ROLE,
    PSS_HDLN_ASYNC_UPDATE_DEC_STARTED,
    PSS_HDLN_ASYNC_UPDATE_DEC_STATUS,
    PSS_HDLN_COLD_SYNC_REQ_DEC_DONE,
    PSS_HDLN_COLD_SYNC_RESP_DEC_STARTED,
    PSS_HDLN_COLD_SYNC_RESP_DEC_FAIL,
    PSS_HDLN_COLD_SYNC_RESP_DEC_SUCCESS,
    PSS_HDLN_COLD_SYNC_RESP_DEC_IN_NON_ACTIVE_ROLE,
    PSS_HDLN_COLD_SYNC_RESP_DEC_IN_CKPT_STATE,
    PSS_HDLN_INVKD_PENDING_AMF_RESP,
    PSS_HDLN_SEND_DATA_REQ_FAIL,
    PSS_HDLN_WARM_SYNC_REQ_DEC_DONE,
    PSS_HDLN_WARM_SYNC_RESP_DEC_STARTED,
    PSS_HDLN_WARM_SYNC_RESP_DEC_FAIL,
    PSS_HDLN_WARM_SYNC_RESP_DEC_SUCCESS,
    PSS_HDLN_WARM_SYNC_RESP_DEC_IN_ACTIVE_ROLE,
    PSS_HDLN_DATA_REQ_DEC_IN_NON_ACTIVE_ROLE,
    PSS_HDLN_DATA_REQ_DEC_DONE,
    PSS_HDLN_DATA_RESP_DEC_STARTED,
    PSS_HDLN_DATA_RESP_DEC_FAIL,
    PSS_HDLN_DATA_RESP_DEC_SUCCESS,
    PSS_HDLN_DATA_RESP_DEC_FAIL_WITH_COLD_SYNC_COMPLT_BUT_WARM_SYNC_FAIL,
    PSS_HDLN_DATA_RESP_DEC_IN_NON_STANDBY_ROLE,
    PSS_HDLN_VDEST_ROLE_QUIESCED_INVLD_PWE,
    PSS_HDLN_MBCSV_SET_CKPT_ROLE_FAIL,
    PSS_HDLN_MBCSV_SET_CKPT_ROLE_SUCCESS,
    PSS_HDLN_MBCSV_SEND_CKPT_FAIL,
    PSS_HDLN_MBCSV_SEND_CKPT_SUCCESS,
    PSS_HDLN_MBCSV_MDEST_ENC_FAIL,
    PSS_HDLN_MBCSV_MDEST_ENC_SUCCESS,
    PSS_HDLN_MBCSV_MDEST_DEC_FAIL,
    PSS_HDLN_MBCSV_MDEST_DEC_SUCCESS,
    PSS_HDLN_MBCSV_ENC_PCN_SUCCESS,
    PSS_HDLN_MBCSV_ENC_PCN_NULL,
    PSS_HDLN_MBCSV_ENC_PCN_FAIL,
    PSS_HDLN_MBCSV_DEC_PCN_FAIL,
    PSS_HDLN_MBCSV_DEC_PCN_SUCCESS,
    PSS_HDLN_MBCSV_DEC_PP_PCN_NULL,
    PSS_HDLN_MBCSV_TBL_ID_ENC_SUCCESS,
    PSS_HDLN_MBCSV_TBL_ID_ENC_FAIL,
    PSS_HDLN_MBCSV_TBL_ID_DEC_SUCCESS,
    PSS_HDLN_MBCSV_TBL_ID_DEC_FAIL,
    PSS_HDLN_RE_RESUME_ACTIVE_ROLE_EVT_POSTED,
    PSS_HDLN_MBCSV_PLBCK_SSNINFO_SESSION_DONE,
    PSS_HDLN_MBCSV_MIB_IDX_LEN_ENC_FAIL,
    PSS_HDLN_MBCSV_MIB_IDX_LEN_ENC_SUCCESS,
    PSS_HDLN_MBCSV_MIB_IDX_LEN_DEC_FAIL,
    PSS_HDLN_MBCSV_MIB_IDX_LEN_DEC_SUCCESS,
    PSS_HDLN_MBCSV_MIB_IDX_ENC_FAIL,
    PSS_HDLN_MBCSV_MIB_IDX_ENC_SUCCESS,
    PSS_HDLN_MBCSV_MIB_IDX_DEC_FAIL,
    PSS_HDLN_MBCSV_MIB_IDX_DEC_SUCCESS,
    PSS_HDLN_MBCSV_ENC_MIB_OBJ_ID_DONE,
    PSS_HDLN_MBCSV_ENC_MIB_OBJ_ID_FAIL,
    PSS_HDLN_MBCSV_DEC_MIB_OBJ_ID_DONE,
    PSS_HDLN_MBCSV_DEC_MIB_OBJ_ID_FAIL,
    PSS_HDLN_MBCSV_ENC_SEQ_NUM_DONE,
    PSS_HDLN_MBCSV_ENC_SEQ_NUM_FAIL,
    PSS_HDLN_MBCSV_DEC_SEQ_NUM_DONE,
    PSS_HDLN_MBCSV_DEC_SEQ_NUM_FAIL,
    PSS_HDLN_MBCSV_ENC_IS_SYS_CLIENT_BOOL_DONE,
    PSS_HDLN_MBCSV_DEC_IS_SYS_CLIENT_BOOL_DONE,
    PSS_HDLN_MBCSV_ENC_ALT_PROFILE_DONE,
    PSS_HDLN_MBCSV_ENC_ALT_PROFILE_FAIL,
    PSS_HDLN_MBCSV_DEC_ALT_PROFILE_DONE,
    PSS_HDLN_MBCSV_DEC_ALT_PROFILE_FAIL,
    PSS_HDLN_MBCSV_ENC_BMASK_FAIL,
    PSS_HDLN_MBCSV_ENC_BMASK_DONE,
    PSS_HDLN_MBCSV_DEC_BMASK_FAIL,
    PSS_HDLN_MBCSV_DEC_BMASK_DONE,
    PSS_HDLN_MBCSV_TBL_ID_FLUSHED_BEFORE_POPULATING_RE_DATA,
    PSS_HDLN_MBCSV_ASYNC_ENC_CALLBACK_EVT_START,
    PSS_HDLN_MBCSV_ASYNC_ENC_CALLBACK_EVT_STATUS,
    PSS_HDLN_MBCSV_ASYNC_ENC_CALLBACK_INVALID_EVT,
    PSS_HDLN_MBCSV_ASYNC_DEC_CALLBACK_EVT_START,
    PSS_HDLN_MBCSV_ASYNC_DEC_CALLBACK_EVT_STATUS,
    PSS_HDLN_MBCSV_ASYNC_DEC_CALLBACK_INVALID_EVT,
    PSS_HDLN_MBCSV_ASYNC_EVT_HANDLING_START,
    PSS_HDLN_MBCSV_ASYNC_EVT_HANDLING_STATUS,
    PSS_HDLN_MBCSV_ASYNC_EVT_HANLDING_EVT_INVALID,
    PSS_HDLN_GET_PROF_MIB_LIST_PER_PCN_OP_FAILED,
    PSS_HDLN_ZERO_MDS_DEST,
    PSS_HDLN_INVALID_PWE_CB,
    PSS_HDLN_OAA_NODE_NOT_FND_FOR_MDEST,
    PSS_HDLN_TBL_NODE_NOT_FND_FOR_TBL_ID,
    PSS_HDLN_OAA_DOWN_EVENT_FAILED,
    PSS_HDLN_OAA_DOWN_EVENT_SUCCESS,
    PSS_HDLN_STDBY_OAA_DOWN_LIST_ADD_FAILED,
    PSS_HDLN_STDBY_OAA_DOWN_LIST_ADD_SUCCESS,
    PSS_HDLN_STDBY_OAA_DOWN_LIST_DELETE_FAILED,
    PSS_HDLN_STDBY_OAA_DOWN_LIST_DELETE_SUCCESS,
    PSS_HDLN_OAA_ENTRY_NOT_FOUND, 
    PSS_HDLN_PSS_VERSION,
    PSS_HDLN_OAA_ACK_FAILED,
    PSS_HDLN_REFORMAT_REQUEST,
    PSS_HDLN_PROFILE_FOUND,
    PSS_HDLN_PWE_FOUND,
    PSS_HDLN_PWE_COUNT,
    PSS_HDLN_PCN_COUNT,
    PSS_HDLN_PCN_FOUND,
    PSS_HDLN_TABLE_COUNT,
    PSS_HDLN_ERR_TABLE_FOUND,
    PSS_HDLN_STORE_REFORMATTING_FROM_1_TO_1EXT_START,
    PSS_HDLN_STORE_REFORMATTING_FROM_1_TO_1EXT_SUCCESS,
    PSS_HDLN_STORE_REFORMATTING_FROM_1EXT_TO_HIGHER_START,
    PSS_HDLN_STORE_REFORMATTING_FROM_1EXT_TO_HIGHER_SUCCESS,
    PSS_HDLN_STORE_REFORMATTING_FROM_HIGHER_TO_1EXT_START,
    PSS_HDLN_STORE_REFORMATTING_FROM_HIGHER_TO_1EXT_SUCCESS,
    PSS_HDLN_MOVE_TABLE_DETAILS_FILE_FAIL,
    PSS_HDLN_TABLE_DETAILS_EXISTS_ON_PERSISTENT_STORE,
    PSS_HDLN_RENAME_FILE_FAILED,
    PSS_HDLN_INVALID_TABLE_DETAILS_HEADER_LEN,
    PSS_HDLN_INVALID_FILE_SIZE,
    PSS_HDLN_PROPERTIES_CHANGED_BUT_NOT_TABLE_VERSION,
    PSS_HDLN_PROFILE_CREATION_FAIL,
    PSS_HDLN_SCAN_DIR_FAILED,
    PSS_HDLN_GET_NEXT_PROFILE_OP_FAILED,
    PSS_HDLN_PROFILE_COPY_FAIL,
    PSS_HDLN_INVALID_PERSISTENT_STORE_FORMAT,
    PSS_HDLN_STORE_REFORMATTING_FROM_HIGHER_TO_2_START,
    PSS_HDLN_STORE_REFORMATTING_FROM_HIGHER_TO_2_SUCCESS,
    PSS_HDLN_MDS_ENC_FAILURE,
    PSS_HDLN_MDS_DEC_FAILURE,
    PSS_HDLN_INVALID_MBCSV_PEER_VER,
    PSS_HDLN_READ_LIB_CONF_FAIL

} PSS_HDLN_FLEX;

typedef enum pss_hdln_flex2
{
    PSS_HDLN_DEL_SPCN_PEND_WBREQ_LIST_NODE,
    PSS_HDLN_SPCN_PEND_WBREQ_LIST_NODE_ALREADY_PRESENT,
    PSS_HDLN_ADD_SPCN_PEND_WBREQ_LIST_NODE_ALLOC_FAIL,
    PSS_HDLN_ADD_SPCN_PEND_WBREQ_LIST_NODE_PCN_ALLOC_FAIL,
    PSS_HDLN_ADD_SPCN_PEND_WBREQ_LIST_SUCCESS,
    PSS_HDLN_MBCSV_RE_NEW_PLBCK_SSN_DETAILS_COPIED,
    PSS_HDLN_MBCSV_RE_NEW_PLBCK_SSN_DETAILS_MODIFIED,
    PSS_HDLN_MBCSV_RE_PLBCK_SSN_DETAILS_FLUSHED,
    PSS_HDLN_MBCSV_RE_PLBCK_SSN_DETAILS_FLUSHED_EVEN_WHEN_NO_PLBCK_ACTIVE,
    PSS_HDLN_RE_SYNC_CKPT_EVT_TYPE,
    PSS_HDLN_RE_SYNC_INVALID_CKPT_EVT_TYPE,
    PSS_HDLN_RE_DIRECT_SYNC_CKPT_EVT_TYPE,
    PSS_HDLN_RE_DIRECT_SYNC_INVALID_CKPT_EVT_TYPE,
    PSS_HDLN_RE_SYNC_CKPT_EVT_POPULATE_FAIL,
    PSS_HDLN_RE_SYNC_CKPT_EVT_SND_FAIL,
    PSS_HDLN_RE_SYNC_CKPT_EVT_SND_SUCCESS,
    PSS_HDLN_SELECT_RETURN_VAL,
    PSS_HDLN_INVK_AMF_DISPATCH,
    PSS_HDLN_AMF_DISPATCH_RETURN_STATUS,
    PSS_HDLN_INVK_MBCSV_DISPATCH,
    PSS_HDLN_MBCSV_DISPATCH_RETURN_STATUS,
    PSS_HDLN_INVK_MBX_DISPATCH,
    PSS_HDLN_MBX_DISPATCH_RETURN_STATUS,
    PSS_HDLN_MBX_DISPATCH_RETURN_IN_HA_STATE,
    PSS_HDLN_INVK_MBX_FLUSH_EVTS,
    PSS_HDLN_RETURN_FROM_THREAD_HANDLER,
    PSS_HDLN_FLUSH_MBX_EVT_TYPE,
    PSS_HDLN_ERR_AMF_SBY_TO_ACT_FAILED_COLD_SYNC,
    PSS_HDLN_ERR_AMF_SBY_TO_ACT_FAILED_WARM_SYNC,
    PSS_HDLN_MBCSV_ERR_IND_AMF_ERR_REPORT,
    PSS_HDLN_SEND_DATA_RESP_FAIL,
    PSS_HDLN_MBCSV_ENC_DATA_RESP_PAYLOAD_FAIL,
    PSS_HDLN_MBCSV_DEC_DATA_RESP_PAYLOAD_FAIL,
    PSS_HDLN_MBCSV_ENC_COLD_SYNC_RESP_PAYLOAD_FAIL,
    PSS_HDLN_MBCSV_DEC_COLD_SYNC_RESP_PAYLOAD_FAIL,
    PSS_HDLN2_LIB_COMP_FILE_OPEN_FAIL,
    PSS_HDLN_ERR_AMF_SBY_TO_ACT_FAILED_LIBCONF_FILE_RELOAD,
    PSS_HDLN_ERR_AMF_SBY_TO_ACT_FAILED_SPCNLIST_FILE_RELOAD,
    PSS_HDLN_MBCSV_ENC_LIBNAME_FAIL,
    PSS_HDLN_MBCSV_DEC_LIBNAME_FAIL,
    PSS_HDLN_MBCSV_ENC_APPNAME_FAIL,
    PSS_HDLN_MBCSV_DEC_APPNAME_FAIL,
    PSS_HDLN_PID_FILE_OPEN_FAIL,
    PSS_HDLN_COMP_NAME_FILE_OPEN_FAIL,
    PSS_HDLN_MBCSV_SEND_DATA_REQ_FAIL,
    PSS_HDLN_MBCSV_SEND_DATA_REQ_SUCCESS,
    PSS_HDLN_MBCSV_ENC_PARTIAL_DELETE_DONE_SUCCESS,
    PSS_HDLN_MBCSV_ENC_PARTIAL_DELETE_DONE_FAIL,
    PSS_HDLN_MBCSV_DEC_PARTIAL_DELETE_DONE_SUCCESS,
    PSS_HDLN_MBCSV_DEC_PARTIAL_DELETE_DONE_FAIL,
    PSS_HDLN2_RE_RESUME_ACTIVE_FUNCTIONALITY_INVOKED,
    PSS_HDLN2_RE_RESUME_ACTIVE_FUNCTIONALITY_COMPLETED,
    PSS_HDLN2_CLI_REQ_REPLACE,
    PSS_HDLN2_CLI_REQ_RELOADLIBCONF,
    PSS_HDLN2_CLI_REQ_RELOADSPCNLIST,
    PSS_HDLN2_TEST_EXST_PRO,
    PSS_HDLN2_TEST_NEW_PRO,
    PSS_HDLN2_TEST_TRIGGER_OP,
    PSS_HDLN2_TEST_CUR_PRO,
    PSS_HDLN2_IGNORING_NON_PRIMARY_MDS_SVC_EVT,
    PSS_HDLN2_MAS_MDS_NO_ACTIVE,
    PSS_HDLN2_MAS_MDS_NEW_ACTIVE,
    PSS_HDLN2_MAS_MDS_NEW_ACTIVE_AS_UP_EVT,
    PSS_HDLN2_BAM_MDS_NO_ACTIVE,
    PSS_HDLN2_BAM_MDS_NEW_ACTIVE,
    PSS_HDLN2_BAM_MDS_NEW_ACTIVE_AS_UP_EVT,
    PSS_HDLN2_MIB_REQ_RETURN_NO_MAS,
    PSS_HDLN2_MIB_REQ_RETURN_VALUE,
    PSS_HDLN2_MIB_REQ_RETRY_COUNT,
    PSS_HDLN2_RDA_GIVEN_INIT_ROLE,
    PSS_HDLN2_SCLR_SET_OCT_OBJECT_LENGTH_MISMATCH_WITH_STREAM_SPEC_MAX_LEN,
    PSS_HDLN2_SCLR_SET_OCT_OBJECT_LENGTH_MISMATCH_WITH_DISCRETE_OCT_STR_MAX_LEN,
    PSS_HDLN2_SET_FMAT_ID_NOT_SUPPORTED,
    PSS_HDLN2_SET_VAR_INFO_LEN_NOT_SUPPORTED,
    PSS_HDLN2_SET_NUM_INST_IDS_MISMATCH,
    PSS_HDLN2_SET_PARAM_ID_MISMATCH_WITH_VAR_INFO_PARAM_ID,
    PSS_HDLN2_SET_OPEN_TEMP_FILE_FAIL,
    PSS_HDLN2_SET_COPY_TEMP_FILE_FAIL,
    PSS_HDLN2_SET_COPY_TEMP_FILE_TO_ALT_PROFILE_FAIL,
    PSS_HDLN2_SET_OPEN_MIB_FILE_FAIL,
    PSS_HDLN2_DEL_INST_NODE_FROM_PAT_TREE_FAIL,
    PSS_HDLN2_SET_KEY_FROM_INST_IDS_FMAT_ID_NOT_SUPPORTED,
    PSS_HDLN2_SET_KEY_FROM_INST_IDS_FMAT_INT_NOT_SUPPORTED,
    PSS_HDLN2_SET_KEY_FRM_INST_IDS_NUM_INST_IDS_MISMATCH,
    PSS_HDLN2_SETROW_DEC_PARAM_FAIL,
    PSS_HDLN2_SETROW_DEC_PARAM_DONE_FAIL,
    PSS_HDLN2_SETALLROWS_DEC_INIT_FAIL,
    PSS_HDLN2_SETALLROWS_DEC_ROW_INIT_FAIL,
    PSS_HDLN2_SETALLROWS_DEC_ROW_INST_IDS_FAIL,
    PSS_HDLN2_SETALLROWS_DEC_PARAM_FAIL,
    PSS_HDLN2_SETALLROWS_ROW_DEC_DONE_FAIL,
    PSS_HDLN2_SETALLROWS_DEC_DONE_FAIL,
    PSS_HDLN2_REMOVEROWS_DEC_INIT_FAIL,
    PSS_HDLN2_REMOVEROWS_DEC_INST_IDS_FAIL,
    PSS_HDLN2_REMOVEROWS_DEC_DONE_FAIL,
    PSS_HDLN2_WBREQ_EOP_STATUS_SEND_FAIL,
    PSS_HDLN2_WBREQ_EOP_STATUS_SEND_SUCCESS,
    PSS_HDLN2_RE_TBL_REC_ADD_FAIL_MIB_DESC_NULL,
    PSS_HDLN2_LIB_CONF_FILE_OPEN_IN_APPEND_MODE_FAIL,
    PSS_HDLN2_SET_PARAM_VAL_FAIL_VALIDATION_TEST
} PSS_HDLN_FLEX2;

/******************************************************************************
 Logging offset indexes for Service Provider (MDS) logging
 ******************************************************************************/
typedef enum pss_svc_prvdr_flex
{
    PSS_SP_MDS_INSTALL_FAILED,
    PSS_SP_MDS_INSTALL_SUCCESS,
    PSS_SP_MDS_UNINSTALL_FAILED,
    PSS_SP_MDS_UNINSTALL_SUCCESS,
    PSS_SP_MDS_SUBSCR_FAILED,
    PSS_SP_MDS_SUBSCR_SUCCESS,
    PSS_SP_MDS_SND_MSG_SUCCESS,
    PSS_SP_MDS_SND_MSG_FAILED,
    PSS_SP_MDS_RCV_MSG,
    PSS_SP_MDS_RCV_EVT,

    PSS_SP_MAX
} PSS_SVC_PRVDR_FLEX;

/******************************************************************************
 Logging offset indexes for Lock logging 
 ******************************************************************************/
typedef enum pss_locks_flex
{
    PSS_LK_LOCKED,
    PSS_LK_UNLOCKED,
    PSS_LK_CREATED,
    PSS_LK_DELETED
} PSS_LOCKS_FLEX;


/******************************************************************************
 Logging offset indexes for Memory Fail logging 
 ******************************************************************************/
typedef enum pss_memfail_flex
{
    PSS_MF_MABMSG_ALLOC_FAILED,
    PSS_MF_HDLN_CB_ALLOC_FAILURE,
    PSS_MF_TBL_INFO_ALLOC_FAIL,
    PSS_MF_VAR_INFO_ALLOC_FAIL,
    PSS_MF_PSS_TBL_RNK_ALLOC_FAIL,
    PSS_MF_PSS_CB_ALLOC_FAIL,
    PSS_MF_PSS_SPCN_LIST,
    PSS_MF_PCN_STRING_ALLOC_FAIL,
    PSS_MF_PWE_CB_ALLOC_FAIL,
    PSS_MF_TBL_REC_ALLOC_FAIL,
    PSS_MF_MIB_TBL_DATA_ALLOC_FAIL,
    PSS_MF_OCT_ALLOC_FAIL,
    PSS_MF_MIB_ROW_DATA_ALLOC_FAIL,
    PSS_MF_SCLR_MIB_ROW_ALLOC_FAIL,
    PSS_MF_SPCN_LIST_ALLOC_FAIL,
    PSS_MF_PSS_WBSORT_ENTRY_ALLOC_FAIL,
    PSS_MF_PSS_ODSORT_ENTRY_ALLOC_FAIL,
    PSS_MF_PSS_ODSORT_TBL_REC_ALLOC_FAIL,
    PSS_MF_OAA_ENTRY_ALLOC_FAIL,
    PSS_MF_CLIENT_ENTRY_ALLOC_FAIL,
    PSS_MF_MIB_INST_IDS_ALLOC_FAIL,
    PSS_MF_OAA_CLT_ID_ALLOC_FAIL,
    PSS_MF_PSS_QELEM_ALLOC_FAIL,
    PSS_MF_MMGR_BUFFER_ALLOC_FAIL,
    PSS_MF_MMGR_SPCN_WBREQ_PEND_LIST_FAIL,
    PSS_MF_CSI_NODE_ALLOC_FAILED, 
    PSS_MF_UBA_ENC_INIT_SPACE_FAIL,
    PSS_MF_UBA_ENC_RESERVE_SPACE_FAIL,
    PSS_MF_UBA_DEC_FLATTEN_SPACE_FAIL,
    PSS_MF_UBA_ENC_OCTETS_FAIL,
    PSS_MF_UBA_DEC_OCTETS_FAIL,
    PSS_MF_MAB_PSS_TBL_LIST_ALLOC_FAIL,
    PSS_MF_MAB_PSS_WARMBOOT_REQ_ALLOC_FAIL,
    PSS_MF_RFRSH_TBL_LIST_ALLOC_FAIL,
    PSS_MF_NCSMIB_TBL_INFO_ALLOC_FAIL,
    PSS_MF_TBL_DETAILS_HDR_ALLOC_FAIL,
    PSS_MF_MAX
} PSS_MEMFAIL_FLEX;


/******************************************************************************
 Logging offset indexes for persistent store operations logging
 ******************************************************************************/
typedef enum pss_store_flex
{
    PSS_MIB_EXISTENCE_IN_STORE_OP_FAIL,
    PSS_MIB_EXISTS_IN_INMEMORY_STORE,
    PSS_MIB_EXISTS_ON_PERSISTENT_STORE,
    PSS_MIB_OPEN_FAIL,
    PSS_MIB_READ_FAIL,
    PSS_MIB_FILE_SIZE_OP_FAIL,
    PSS_MIB_WRITE_FAIL,
    PSS_MIB_CLOSE_FAIL,
    PSS_MIB_SEEK_FAIL,
    PSS_MIB_TABLE_DETAILS_READ_FAIL,
    PSS_STORE_MAX
} PSS_STORE_FLEX;

/******************************************************************************
 Logging offset indexes for MIB Library operations logging
 ******************************************************************************/
typedef enum pss_lib_flex
{
    PSS_LIB_OP_CONF_FILE_OPEN_FAIL,
    PSS_LIB_OP_SYM_LKUP_ERROR,
    PSS_LIB_OP_SYM_RET_ERROR,
    PSS_LIB_MAX
} PSS_LIB_FLEX;

typedef enum pss_lib_info_flex
{
    PSS_LIB_INFO_CONF_FILE_ENTRY,
    PSS_LIB_INFO_CONF_FILE_ENTRY_LOADED,
    PSS_LIB_INFO_CONF_FILE_ENTRY_MBCSV_ENC_DONE,
    PSS_LIB_INFO_CONF_FILE_ENTRY_MBCSV_DEC_DONE,
    PSS_LIB_INFO_MAX
} PSS_LIB_INFO_FLEX;

typedef enum pss_var_info_flex
{
    PSS_VAR_INFO_DETAILS,
    PSS_VAR_INFO_MAX
} PSS_VAR_INFO_FLEX;


/* log the errors and associated data */ 
typedef enum pss_error_flex
{
   PSS_ERR_AMF_DISPATCH_FAILED, 
   PSS_ERR_DO_EVTS_FAILED,
   PSS_ERR_DO_EVT_FAILED,
   PSS_ERR_MBX_RCV_MSG_FAIL,
   PSS_ERR_SELECT_FAILED,
   PSS_ERR_AMF_ATTRIBS_INIT_FAILED,        
   PSS_ERR_AMF_INITIALIZE_FAILED, 
#if 0
   PSS_ERR_AMF_HLTH_CHK_START_FAILED, 
#endif
   PSS_ERR_AMF_CSI_REMOVE_ALL_FAILED,
   PSS_ERR_VDEST_DESTROY_FAILED,
   PSS_ERR_APP_AMF_FINALIZE_FAILED,
   PSS_ERR_AMF_CSI_FLAGS_ILLEGAL,
   PSS_ERR_AMF_ENVID_ILLEGAL, 
   PSS_ERR_CSI_ADD_ONE_FAILED, 
   PSS_ERR_MDS_UNINSTALL_FAILED,
   PSS_ERR_PSSTBL_DESTROY_FAILED, 
   PSS_ERR_CSI_DELINK_FAILED, 
   PSS_ERR_MDS_PWE_QUERY_FAILED,
   PSS_ERR_MDS_VDEST_ROLE_CHG_FAILED,
   PSS_ERR_COMP_NAME_FOPEN_FAILED,
   PSS_ERR_COMP_NAME_FSCANF_FAILED, 
   PSS_ERR_COMP_NAME_SETENV_FAILED,
   PSS_ERR_IPC_CREATE_FAILED, 
   PSS_ERR_IPC_ATTACH_FAILED, 
   PSS_ERR_SIG_INSTALL_FAILED, 
   PSS_ERR_TASK_CREATE_FAILED, 
   PSS_ERR_TASK_START_FAILED, 
   PSS_ERR_TGT_SVSC_CREATE_FAILED, 
   PSS_ERR_DEF_ENV_CREATE_FAILED, 
   PSS_ERR_TGT_SVSC_LM_CREATE_FAILED, 
   PSS_ERR_VDEST_CREATE_FAILED, 
   PSS_ERR_LM_CREATE_FAILED, 
   PSS_ERR_TGT_SVCS_DESTROY_FAILED, 
   PSS_ERR_SPIR_MDS_LOOKUP_CREATE_FAILED, 
   PSS_ERR_SPIR_MAA_LOOKUP_CREATE_FAILED, 
   PSS_ERR_SPIR_OAA_LOOKUP_CREATE_FAILED, 
   PSS_ERR_VDEST_ROLE_CHANGE_FAILED, 
   PSS_ERR_MDS_PWE_INSTALL_FAILED, 
   PSS_ERR_MDS_SUBSCRIBE_FAILED, 
   PSS_ERR_PWE_CB_INIT_FAILED, 
   PSS_ERR_DEF_ENV_INIT_FAILED, 
   PSS_ERR_SPIR_MAA_REL_INST_FAILED,
   PSS_ERR_SPIR_MDS_REL_INST_FAILED,
   PSS_ERR_AMF_INVALID_PWE_ID, 
   PSS_ERR_AMF_INVALID_HA_STATE, 
   PSS_ERR_CREATE_LM_API_NOT_YET_CALLED, 
   PSS_ERR_OAA_TREE_DESTROY_FAILED, 
   PSS_ERR_CLIENT_TABLE_TREE_DESTROY_FAILED,
   PSS_ERR_AMF_CSI_ATTRIBS_COUNT_INVALID, 
   PSS_ERR_AMF_CSI_ATTRIBS_NULL,
   PSS_ERR_AMF_CSI_ATTRIBS_NAME_OR_ATTRIB_VAL_NULL,
   PSS_ERR_AMF_CSI_SSCANF_FAILED, 
   PSS_ERR_AMF_CSI_DECODED_ENV_ID_OUTOF_REACH, 
   PSS_ERR_AMF_CSI_ATTRIBS_INCONCISTENT, 
   PSS_ERR_AMF_CSI_ATTRIBS_NAME_INVALID, 
   PSS_ERR_MBCSV_DISPATCH_FAILED,
   PSS_ERR_AMF_TIMER_FAILED,
   PSS_ERR_RDA_INIT_ROLE_GET_FAILED,
   PSS_ERR_TS_CREATE_FAILED,

   PSS_ERROR_FLEX_MAX
}PSS_ERROR_FLEX;
/******************************************************************************
 Logging offset indexes for canned constant strings for the ASCII SPEC
 ******************************************************************************/
typedef enum pss_flex_sets
{
    PSS_FC_HDLN,
    PSS_FC_HDLN2,
    PSS_FC_SVC_PRVDR_FLEX,
    PSS_FC_LOCKS,
    PSS_FC_MEMFAIL,
    PSS_FC_API,
    PSS_FC_STORE,
    PSS_FC_LIB,
    PSS_FC_INFO,
    PSS_FC_LIB_INFO,
    PSS_FC_VAR_INFO,
    PSS_FC_TBL_INFO,
    PSS_FC_WBREQ_INFO,
    PSS_FC_PLBCK,
    PSS_FC_LAST_UPDT_INFO,
    PSS_FC_CLIENT_ENTRY,
    PSS_FC_SNMP_REQ,
    PSS_FC_MEMDUMP,
    PSS_FC_ERROR,
    PSS_FC_CONF_DONE,
    PSS_FC_BAM_REQ,
    PSS_FC_PLBCK_SET_COUNT,
    PSS_FC_TBL_BIND,
    PSS_FC_TBL_UNBIND,
    PSS_FC_WBREQ_I,
    PSS_FC_WBREQ_II,
    PSS_FC_OAA_ACK_EVT
} PSS_FLEX_SETS;


typedef enum pss_log_ids
{
    PSS_LID_HDLN, /* 0 */
    PSS_LID_SVC_PRVDR_FLEX,
    PSS_LID_LOCKS,
    PSS_LID_MEMFAIL,
    PSS_LID_API,
    PSS_LID_STORE,
    PSS_LID_LIB,
    PSS_LID_LIB_INFO,
    PSS_LID_VAR_INFO,
    PSS_LID_INFO,
    PSS_LID_TBL_INFO,
    PSS_LID_WBREQ_INFO,
    PSS_LID_PLBCK,
    PSS_LID_LAST_UPDT_INFO,
    PSS_LID_CLIENT_ENTRY,
    PSS_LID_SNMP_REQ,
    PSS_LID_MEMDUMP,
    PSS_LID_HDLN_I,
    PSS_LID_HDLN2_I,
    PSS_LID_HDLN_C,
    PSS_LID_HDLN_II, 
    PSS_LID_HDLN_III, 
    PSS_LID_STR, 
    PSS_LID_ERROR,
    PSS_LID_ERR_I, 
    PSS_LID_ERR_II, 
    PSS_LID_CSI,
    PSS_LID_ST_CHG,
    PSS_LID_CONF_DONE,
    PSS_LID_BAM_REQ,
    PSS_LID_PLBCK_SET_COUNT,
    PSS_LID_TBL_BIND,
    PSS_LID_TBL_UNBIND,
    PSS_LID_WBREQ_I,
    PSS_LID_WBREQ_II,
    PSS_LID_OAA_ACK_EVT,
    PSS_LID_NO_CB,
    PSS_LID_TBL_DTLS,
    PSS_LID_HDLN_CLL,

    PSS_LID_MAX
} PSS_LOG_IDS;

typedef enum pss_api_flex
{
    PSS_API_SVC_DESTROY,
    PSS_API_SVC_GET,
    PSS_API_SVC_SET,
    PSS_API_TBL_REG,
    PSS_API_TBL_UNREG,
    PSS_API_ROW_REG,
    PSS_API_ROW_UNREG, 
    PSS_API_AMF_COMP
}PSS_API_FLEX;

typedef enum pss_info_flex
{
    PSS_INFO_SPCN,
    PSS_INFO_SPCN_ENC_DONE,
    PSS_INFO_SPCN_DEC_DONE,
    PSS_INFO_NO_CLIENTS_FOUND_IN_PROFILE
}PSS_INFO_FLEX;


typedef enum pss_tbl_info_flex
{
    PSS_TBL_DESC_INFO
}PSS_TBL_INFO_FLEX;

typedef enum pss_wbreq_flex
{
    PSS_WBREQ_RCVD_INFO,
    PSS_WBREQ_RCVD_TBL_IS_NOT_PERSISTENT,
    PSS_WBREQ_RCVD_PROCESS_START, 
    PSS_WBREQ_RCVD_PROCESS_END, 
    PSS_WBREQ_RCVD_PROCESS_SKIP, 
    PSS_WBREQ_RCVD_PROCESS_ABORT, 
    PSS_WBREQ_RCVD_PLBCK_OPTION_SET_TO_BAM,
    PSS_WBREQ_RCVD_PLBCK_OPTION_SET_TO_PSS
}PSS_WBREQ_FLEX;

typedef enum pss_oaa_ack_evt_flex
{
    PSS_OAA_ACK_SEND_SUCCESS,
    PSS_OAA_ACK_SEND_FAIL
}PSS_OAA_ACK_EVT_FLEX;

typedef enum pss_plbck_flex
{
    PSS_PLBCK_REQ,
    PSS_PLBCK_DONE,
    PSS_PLBCK_REQ_TO_BAM,
    PSS_PLBCK_LAST_UPDATE_BIT_SET
}PSS_PLBCK_FLEX;

typedef enum pss_tbl_bind_flex
{
    PSS_TBL_BIND_RCVD,
    PSS_TBL_BIND_MIB_DESC_NULL,
    PSS_TBL_BIND_DONE
}PSS_TBL_BIND_FLEX;

typedef enum pss_wbreq_i_flex
{
    PSS_WBREQ_I_PROCESS_SORTED_LIST_START,
    PSS_WBREQ_I_PROCESS_SORTED_LIST_END,
    PSS_WBREQ_I_PROCESS_SORTED_LIST_ABORT
}PSS_WBREQ_I_FLEX;

typedef enum pss_wbreq_ii_flex
{
    PSS_WBREQ_II_SORT_FNC_TBL_DATA_AVAILABLE,
    PSS_WBREQ_II_TBL_ADDED_TO_SORT_DB,
    PSS_WBREQ_II_SORT_FNC_SPCN_TBL_DATA_NOT_AVAILABLE,
    PSS_WBREQ_II_SORT_FNC_TBL_DATA_NOT_AVAILABLE,
    PSS_WBREQ_II_INPUT_TBL_NOT_PERSISTENT,
    PSS_WBREQ_II_SORTING_INPUT_TBL,
    PSS_WBREQ_II_SORT_FNC_INPUT_TBL_FND_IN_PCN_NODE,
    PSS_WBREQ_II_SORT_FNC_INPUT_TBL_NOT_FND_IN_PCN_NODE,
    PSS_WBREQ_II_PROCESS_TBL_OF_SORT_DB 
}PSS_WBREQ_II_FLEX;

typedef enum pss_tbl_unbind_flex
{
    PSS_TBL_UNBIND_RCVD,
    PSS_TBL_UNBIND_FND_OAA_CLT_NODE,
    PSS_TBL_UNBIND_SUCCESS,
    PSS_TBL_UNBIND_IS_NOT_PERSISTENT_TABLE
}PSS_TBL_UNBIND_FLEX;

typedef enum pss_last_updt_info_flex
{
    PSS_LAST_UPDT_IS_SET,
    PSS_LAST_UPDT_IS_SETROW,
    PSS_LAST_UPDT_IS_SETALLROWS,
    PSS_LAST_UPDT_IS_REMOVEROWS
}PSS_LAST_UPDT_INFO_FLEX;

typedef enum pss_client_entry_flex
{
    PSS_CLIENT_ENTRY_ADD,
    PSS_CLIENT_ENTRY_DEL
}PSS_CLIENT_ENTRY_FLEX;

typedef enum pss_snmp_req_flex
{
    PSS_SNMP_REQ_SET,
    PSS_SNMP_REQ_SETROW,
    PSS_SNMP_REQ_MOVEROW,
    PSS_SNMP_REQ_SETALLROWS,
    PSS_SNMP_REQ_REMOVEROWS,
    PSS_SNMP_REQ_TBL_ID_TOO_LARGE,
    PSS_SNMP_REQ_NO_TBL_REG,
    PSS_SNMP_REQ_ZERO_INST_LEN_OR_NULL_INST_IDS,
    PSS_SNMP_REQ_ADD_ROW_FAIL,
    PSS_SNMP_REQ_TBL_REC_NOT_INITED,
    PSS_SNMP_REQ_INDEX_VALIDATE_FAIL,
    PSS_SNMP_REQ_PARAMVAL_VALIDATE_FAIL
}PSS_SNMP_REQ_FLEX;

typedef enum pss_memdump_flex
{
    PSS_NCSMIB_ARG_TBL_DUMP,
    PSS_NCSMIB_ARG_INSTID_DUMP,
    PSS_NCSMIB_ARG_PARAM_INFO_DUMP,
    PSS_NCSMIB_ARG_INT_INFO_DUMP,
    PSS_NCSMIB_ARG_OCT_INFO_DUMP
}PSS_MEMDUMP_FLEX;

typedef enum pss_conf_done_flex
{
    PSS_CONF_DONE_RCVD,
    PSS_CONF_DONE_FINISHED,
    PSS_CONF_DONE_FAIL
}PSS_CONF_DONE_FLEX;

typedef enum pss_bam_req_flex
{
    PSS_BAM_REQ_SENT,
    PSS_BAM_REQ_FAIL_BAM_NOT_ALIVE,
    PSS_BAM_REQ_FAIL_MDS_ERROR
}PSS_BAM_REQ_FLEX;

typedef enum pss_plbck_set_count_flex
{
    PSS_PLBCK_SET_COUNT
}PSS_PLBCK_SET_COUNT_FLEX;

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                          PSS Logging Control

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

EXTERN_C MABCOM_API uns32 pss_dtsv_bind(void); 
EXTERN_C MABCOM_API uns32 pss_dtsv_unbind(void); 
EXTERN_C uns32 pssv_log_str_lib_req(NCS_LIB_REQ_INFO *req_info); 
EXTERN_C uns32 pss_reg_strings(void);
EXTERN_C uns32 pss_dereg_strings(void);
EXTERN_C void pss_log_memdump(uns8 id, NCSFL_MEM mem);
EXTERN_C void pss_log_ncsmib_arg(NCSMIB_ARG *mib_arg);

/* DTSv versioning support */
#define PSSV_LOG_VERSION 4

#if (PSR_LOG == 1)

#define m_LOG_PSS_HEADLINE(s, id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TI, id) 

#define m_LOG_PSS_HEADLINE2(s, id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TI, id) 

#define m_LOG_PSS_SVC_PRVDR(s, id, i1, i2) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_SVC_PRVDR_FLEX, PSS_FC_SVC_PRVDR_FLEX,\
                   NCSFL_LC_SVC_PRVDR, s, NCSFL_TYPE_TILL, id, i1, i2)

#define m_LOG_PSS_LOCK(id, lck)\
         ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_LOCKS, PSS_FC_LOCKS, \
                    NCSFL_LC_MISC, NCSFL_SEV_DEBUG,\
                    NCSFL_TYPE_TIL, id, (long)lck)

#define m_LOG_PSS_MEMFAIL(s, id, func_name)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_MEMFAIL, \
                   PSS_FC_MEMFAIL, NCSFL_LC_MEMORY, s, \
                   "TIC", id, func_name)
#define m_LOG_PSS_MEM(s, id, inst_len, mem)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_MEM, \
                   PSS_FC_HDLN, NCSFL_LC_MEMORY, s, \
                   "TILD", id, inst_len, mem)

#define m_PSS_MEMDUMP_LOG(index, info) pss_log_memdump(index, info)

#define m_PSS_LOG_NCSMIB_ARG(arg) pss_log_ncsmib_arg(arg)

#define m_LOG_PSS_API(id)  

#define m_LOG_PSS_STORE(s, id, pwe_id, pcn_name, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_STORE, PSS_FC_STORE, NCSFL_LC_HEADLINE, s, \
                   NCSFL_TYPE_TICLL, id, pcn_name, pwe_id, tbl_id)

#define m_LOG_PSS_HDLN_CLL(s, id, i1, i2, i3) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_CLL, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICLL, id, i1, i2, i3) 

#define m_LOG_PSS_STORE_C(s, id, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_STORE, PSS_FC_STORE, NCSFL_LC_HEADLINE, s, \
                   NCSFL_TYPE_TIC, id, tbl_id)

#define m_LOG_PSS_LIB_OP(s, id, dl_error) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_LIB, PSS_FC_LIB, NCSFL_LC_HEADLINE, s, \
                   "TIC", id, dl_error)

#define m_LOG_PSS_LIB_INFO(s, id, libname, appname) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_LIB_INFO, PSS_FC_LIB_INFO, NCSFL_LC_HEADLINE, s, \
                   "TICC", id, libname, appname)

#define m_LOG_PSS_VAR_INFO(s, id, tbl_id, pss_offset, param_id, offset, len, is_index_id, access, status, set_when_down, fmat_id, obj_type, int_range_min, int_range_max, oct_min, oct_max, is_readonly_persistent) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_VAR_INFO, PSS_FC_VAR_INFO, NCSFL_LC_HEADLINE, s, \
                   "TILLLLLLLLLLLLLLLL", id, tbl_id, pss_offset, param_id, offset, len, is_index_id, access, status, set_when_down, fmat_id, obj_type, int_range_min, int_range_max, oct_min, oct_max, is_readonly_persistent)


#define m_LOG_PSS_INFO(s, id, pcn, boolean) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_INFO, PSS_FC_INFO, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICL, id, pcn, boolean)

#define m_LOG_PSS_INFO_C(s, id, i1) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_C, PSS_FC_INFO, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIC, id, i1)

#define m_LOG_PSS_TBL_REG_INFO(s, id, tbl_name, tbl_id, tbl_rank, num_objects, num_inst_ids, key_len, row_len, capability, bitmap_len) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_TBL_INFO, PSS_FC_TBL_INFO, NCSFL_LC_HEADLINE, s, "TICLLLLLLLL", id, tbl_name, tbl_id, tbl_rank, num_objects, num_inst_ids, key_len, row_len, capability, bitmap_len)

#define m_LOG_PSS_RCVD_WBREQ_EVT(s, id, pcn, pwe_id, is_sys_client, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_WBREQ_INFO, PSS_FC_WBREQ_INFO, NCSFL_LC_HEADLINE, s, "TICLLL", id, pcn, pwe_id, is_sys_client, tbl_id)

#define m_LOG_PSS_PLBCK_INFO(s, id, pcn, pwe_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_PLBCK, PSS_FC_PLBCK, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICL, id, pcn, pwe_id)

#define m_LOG_PSS_LAST_UPDT_INFO(s, id, pcn, pwe_id, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_LAST_UPDT_INFO, PSS_FC_LAST_UPDT_INFO, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICLL, id, pcn, pwe_id, tbl_id)

#define m_LOG_PSS_CLIENT_ENTRY(s, id, pcn, pwe_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_CLIENT_ENTRY, PSS_FC_CLIENT_ENTRY, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICL, id, pcn, pwe_id)

#define m_LOG_PSS_SNMP_REQ(s, id, pwe_id, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_SNMP_REQ, PSS_FC_SNMP_REQ, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TILL, id, pwe_id, tbl_id)

#define m_LOG_PSS_HDLN_I(s, id, i1) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_I, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIL, id, i1) 

#define m_LOG_PSS_HDLN2_I(s, id, i1) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN2_I, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIL, id, i1) 

#define m_LOG_PSS_HDLN_II(s, id, i1, i2) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_II, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TILL, id, i1, i2) 

#define m_LOG_PSS_HDLN_III(s, id, i1, i2, i3) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_III, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TILLL, id, i1, i2, i3) 

#define m_LOG_PSS_HDLN2_II(s, id, i1, i2) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_II, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TILL, id, i1, i2) 

#define m_LOG_PSS_HDLN2_III(s, id, i1, i2, i3) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_III, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TILLL, id, i1, i2, i3) 

#define m_LOG_PSS_TBL_DTLS(s, id, i1, i2, i3, i4, i5, i6, i7, i8) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_TBL_DTLS, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, "TILLLLLLLL", id, i1, i2, i3, i4, i5, i6, i7, i8)

#define m_LOG_PSS_STR(sev, str)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_STR, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, sev, NCSFL_TYPE_TIC,\
                   PSS_HDLN_STR, str)

#define m_LOG_PSS_STR2(sev, str)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_STR, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, sev, NCSFL_TYPE_TIC,\
                   PSS_HDLN_STR, str)

#define m_LOG_PSS_ERROR_NO_DATA(s, c, id)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_ERROR, \
                   PSS_FC_ERROR, c, s, \
                   "TI", id)

#define m_LOG_PSS_ERROR_DATA(s, c, id, i1)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_ERR_I, \
                   PSS_FC_ERROR, c, s, \
                   "TIL", id, i1)

#define m_LOG_PSS_ERROR_I(s, id, i1) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_ERR_I, \
                   PSS_FC_ERROR, NCSFL_LC_HEADLINE, s, \
                   NCSFL_TYPE_TIL, id, i1)

#define m_LOG_PSS_ERROR_II(c, s, id, i1, i2) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_ERR_II, \
                   PSS_FC_ERROR, c, s, \
                   NCSFL_TYPE_TILL, id, i1, i2)

#define m_LOG_PSS_CSI_DETAILS(s, id, flags, compName, csiName, state)\
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_CSI, \
                   PSS_FC_HDLN, NCSFL_LC_HEADLINE, s, \
                   "TILCCL", id, flags, compName, csiName, state)

#define m_LOG_PSS_STATE_CHG(s, id, cur_state, new_state) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_ST_CHG, \
                   PSS_FC_HDLN, NCSFL_LC_HEADLINE, s, \
                   "TILL", id, cur_state, new_state)

#define m_LOG_PSS_CONF_DONE(s, id, pcn) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_CONF_DONE, PSS_FC_CONF_DONE, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIC, id, pcn)

#define m_LOG_PSS_BAM_REQ(s, id, pcn) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_BAM_REQ, PSS_FC_BAM_REQ, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIC, id, pcn)

#define m_LOG_PSS_PLBCK_SET_COUNT(s, id, pcn, tbl_id, capability, count) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_PLBCK_SET_COUNT, PSS_FC_PLBCK_SET_COUNT, NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TICLLL, id, pcn, tbl_id, capability, count)

#define m_LOG_PSS_TBL_BIND_EVT(s, id, pcn, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_TBL_BIND, PSS_FC_TBL_BIND, NCSFL_LC_HEADLINE, s, "TICL", id, pcn, tbl_id)

#define m_LOG_PSS_TBL_UNBIND_EVT(s, id, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_TBL_UNBIND, PSS_FC_TBL_UNBIND, NCSFL_LC_HEADLINE, s, "TIL", id, tbl_id)

#define m_LOG_PSS_WBREQ_I(s, id, pcn, pwe_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_WBREQ_I, PSS_FC_WBREQ_I, NCSFL_LC_HEADLINE, s, "TICL", id, pcn, pwe_id)

#define m_LOG_PSS_WBREQ_II(s, id, tbl_id) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_WBREQ_II, PSS_FC_WBREQ_II, NCSFL_LC_HEADLINE, s, "TIL", id, tbl_id)

#define m_LOG_PSS_ACK_EVT(s, id, seq_num) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_OAA_ACK_EVT, PSS_FC_OAA_ACK_EVT, NCSFL_LC_HEADLINE, s, "TIL", id, seq_num)

#define m_LOG_PSS_HDLN_STR(s, id, str) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_C, PSS_FC_HDLN,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIC, id, str) 

#define m_LOG_PSS_HDLN_STR2(s, id, str) \
        ncs_logmsg(NCS_SERVICE_ID_PSS, PSS_LID_HDLN_C, PSS_FC_HDLN2,\
                   NCSFL_LC_HEADLINE, s, NCSFL_TYPE_TIC, id, str) 


#else

#define m_LOG_PSS_HEADLINE(f, id)  
#define m_LOG_PSS_HEADLINE2(f, id)  
#define m_LOG_PSS_SVC_PRVDR(s, id, i1, i2)
#define m_LOG_PSS_LOCK(id, lck)        
#define m_LOG_PSS_MEM(s, id, inst_len, mem)
#define m_PSS_MEMDUMP_LOG(index, info)
#define m_PSS_LOG_NCSMIB_ARG(arg)
#define m_LOG_PSS_MEMFAIL(s, id, func_name)
#define m_LOG_PSS_API(id)  
#define m_LOG_PSS_STORE(s, id, profile_name, pwe_id, tbl_id)
#define m_LOG_PSS_HDLN_CLL(s, id, i1, i2, i3)
#define m_LOG_PSS_STORE_C(s, id, tbl_id)
#define m_LOG_PSS_LIB_OP(s, id, dl_error)
#define m_LOG_PSS_LIB_INFO(s, id, libname, appname)
#define m_LOG_PSS_VAR_INFO(s, id, tbl_id, var_len, param_id, offset, len, is_index_id, access, status, set_when_down, fmat_id, obj_type, int_range_min, int_range_max, oct_min, oct_max, is_readonly_persistent)
#define m_LOG_PSS_INFO(s, id, pcn, boolean) 
#define m_LOG_PSS_INFO_C(s, id, i1) 
#define m_LOG_PSS_TBL_REG_INFO(s, id, tbl_name, tbl_id, tbl_rank, num_objects, num_inst_ids, key_len, row_len, capability, bitmap_len)
#define m_LOG_PSS_RCVD_WBREQ_EVT(s, id, pcn, pwe_id, tbl_id)
#define m_LOG_PSS_PLBCK_INFO(s, id, pcn, pwe_id)
#define m_LOG_PSS_LAST_UPDT_INFO(s, id, pcn, pwe_id, tbl_id, evt_type)
#define m_LOG_PSS_CLIENT_ENTRY(s, id, pcn, tbl_id)
#define m_LOG_PSS_SNMP_REQ(s, id, pwe_id, tbl_id)
#define m_PSS_MEMDUMP_LOG(index, info)

#define m_LOG_PSS_STR(str)
#define m_LOG_PSS_STR2(str)
#define m_LOG_PSS_ERROR_NO_DATA(s, c, id)
#define m_LOG_PSS_ERROR_DATA(s, c, id, i1)
#define m_LOG_PSS_ERROR_I(s, id, i1) 
#define m_LOG_PSS_ERROR_II(c, s, id, i1, i2) 
#define m_LOG_PSS_CSI_DETAILS(s, id, flags, compName, csiName, state)
#define m_LOG_PSS_STATE_CHG(s, id, cur_state, new_state) 
#define m_LOG_PSS_HDLN_I(s, id, i1) 
#define m_LOG_PSS_HDLN2_I(s, id, i1) 
#define m_LOG_PSS_HDLN_II(s, id, i1, i2) 
#define m_LOG_PSS_HDLN_III(s, id, i1, i2, i3) 
#define m_LOG_PSS_HDLN2_II(s, id, i1, i2) 
#define m_LOG_PSS_HDLN2_III(s, id, i1, i2, i3) 
#define m_LOG_PSS_TBL_DTLS(s, id, i1, i2, i3, i4, i5, i6, i7, i8)
#define m_LOG_PSS_CONF_DONE(s, id, pcn)
#define m_LOG_PSS_BAM_REQ(s, id, pcn)
#define m_LOG_PSS_PLBCK_SET_COUNT(s, id, pcn, tbl_id, capability, count)
#define m_LOG_PSS_TBL_BIND_EVT(s, id, pcn, tbl_id)
#define m_LOG_PSS_TBL_UNBIND_EVT(s, id, tbl_id)
#define m_LOG_PSS_WBREQ_I(s, id, pcn, pwe)
#define m_LOG_PSS_WBREQ_II(s, id, tbl_id)
#define m_LOG_PSS_ACK_EVT(s, id, seq_num) 
#define m_LOG_PSS_HDLN_STR(s, id, str)
#define m_LOG_PSS_HDLN_STR2(s, id, str)

#endif /* #if (PSR_LOG == 1) */

#endif /* PSR_LOG_H */
