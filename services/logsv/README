#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#

GENERAL

This directory (logsv) contains an implementation of the SAF LOG service
version A.02.01.

The LOG service is implemented as a server process executing on the controllers
using a 2N redundancy model. Message based check pointing is used to synchronize
the two server instances.

The Log file property "High Availability flag" is not supported by LOG itself
but by using a replicated file system. The LOG implementation is unaware of such
a file system and must be configured to use it, see below.


DEPENDENCIES

logsv depends of the following other OpenSAF services:
- MBCSV
- MDS
- LEAP
- logtrace


DIRECTORY STRUCTURE

services/logsv/inc	Common header files used by both lga and lgs
services/logsv/lga	LOG library implementation
services/logsv/lga	LOG server
services/logsv/utils	saflogger command
lib/lib_SaLog		LOG library staging
tests/logsv/src		Test suite


FILE STRUCTURE


Not yet ...


DATA STRUCTURES

lgs uses the following data structures:

- Control block. Statically allocated, one instance. Access through a global
pointer variable.

- Stream descriptors. Dynamically created, many instances. Accessed using
stream name or ID. Stored in patricia tree and array.

- Client descriptors. Dynamically created, many instances. Accessed using a
client ID. Stored in patricia tree. Contains the MDS address of the client.
Also contains a list of Client-Stream association objects, see below.

- Client-Stream association object. Dynamically created, many instances. One
instance per open stream. Contains a stream ID. Access through client
descriptor.


CONFIGURATION

The LOG specification describes the configuration object class SaLogStreamConfig
which requires the three classes alarm, notification and system log stream to
exist. Without IMM this configuration is instead done using environment
variables. The LOG server start script sources a configuration file with bash
syntax before it launches the LOG server.

The offline (in the OpenSAF distribution) location of the configuration file is:
opensaf/config/saflog.conf

If the default values in this file does not fit your system, edit this file and
rebuild the controller rpm in order to setup your system properly.

The online (in an executing system) location of the configuration file is:
/etc/opt/opensaf/saflog.conf

The following environment variables are required:

LOG_ALARM_FILE_NAME
LOG_ALARM_PATH_NAME
LOG_NOTIFICATION_FILE_NAME
LOG_NOTIFICATION_PATH_NAME
LOG_SYSTEM_FILE_NAME
LOG_SYSTEM_PATH_NAME

The following environment variables are optional and a default value will be
used by LOG if not configured:

LOG_ALARM_LOG_FILE_FORMAT
LOG_ALARM_MAX_LOG_FILE_SIZE
LOG_ALARM_FIXED_LOG_RECORD_SIZE
LOG_ALARM_MAX_FILES_ROTATED
LOG_NOTIFICATION_LOG_FILE_FORMAT
LOG_NOTIFICATION_MAX_LOG_FILE_SIZE
LOG_NOTIFICATION_FIXED_LOG_RECORD_SIZE
LOG_NOTIFICATION_MAX_FILES_ROTATED
LOG_SYSTEM_LOG_FILE_FORMAT
LOG_SYSTEM_MAX_LOG_FILE_SIZE
LOG_SYSTEM_FIXED_LOG_RECORD_SIZE
LOG_SYSTEM_MAX_FILES_ROTATED


COMMAND LINE INTERFACE

The 'saflogger' command can be used to enter log records to any stream. Please
see the on line help for more information.


DEBUG

To enable/disable log server traces in a running system, send signal USR1 to the
saflogd process. Every time the trace state is toggled.

Traces are written to the file:

/var/opt/opensaf/stdouts/opensaf_saflogd

To enable traces from the very start of the log server, uncomment the line:

        #export LOGSV_TRACE_CATEGORIES=ALL

in <path>/opensaf/scripts/controller/opensaf_lgs.sh and rebuild the controller
rpm.

For fatal error syslog is used.


To enable traces in the LOG library, export the variable LOGSV_TRACE_PATHNAME
with a valid pathname before starting the application using the LOG library.

For example:

$ export LOGSV_TRACE_PATHNAME=/tmp/log.trace
$ saflogger hello
$ cat /tmp/log.trace


TEST

Currently a "tetware like" test suite can be found in 'tests/logsv/src'. Enter
that directory, give command 'make' and run the binary produced on controller
and payloads.


TODO

- Implement missing API functions:
	- saLogStreamOpenAsync_2
	- saLogWriteLog
	- saLogLimitGet
	- saLogFilterSetCallback
	- saLogStreamOpenCallback
- NID start of the log server process.
- Create IMM interface
- Implement CLM interaction as described in 3.2
- Implement Log filtering (IMM needed for configuration)
- Implement log file full actions other than rotate
- Set time in library (bug)
- Write optimization, no sync for log write
- Cleanup/act on "FIX" and "TODO" comments
- Revisit trace statements, cleanup
- Cleanup remains of edsv (search for 'channel')
- Implement "5 log Service Administration API" (IMM needed)
- Implement "6 Alarms and Notifications" (NTF needed)
- Port test suite to tetware
- Distributed testing
- Document manual test cases


CONTRIBUTORS/MAINTAINERS

Arne Eriksson <Arne.R.Eriksson@ericsson.com>
Hans Feldt <Hans.Feldt@ericsson.com>
Niklas Nilsson

The LOG service was originally cloned from the edsv service.
