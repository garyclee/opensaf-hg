#!/bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Emerson Network Power
#
#

#
# Node Initialization Daemon startup/shutdown Script
#

### BEGIN INIT INFO
# Provides: $nis_scxb 
# Default-Start: 3 5
# Default-Stop: 0 1 2 4 6
# Short-Description: Start OpenSAF services
# Description: Start OpenSAF System Controller services 
#         with HA role ACTIVE or STANDBY in the cluster. 
### END INIT INFO

# Define the Core generation settings
CORE_FILE_SIZE="unlimited"
CORE_PATTERN="/var/crash/core_%t_%e_%p"
CORE_PATTERN_CURRENT=`cat /proc/sys/kernel/core_pattern`

PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/opensaf/controller/bin:/opt/opensaf/controller/scripts:
export PATH

# OpenSAF SNMP Subagent requires this path to locate its configuration file
export SNMPCONFPATH=/usr/share/snmp

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opensaf/controller/lib:/opt/opensaf/lib:/usr/local/lib # For loading libraries
export LEAP_TMR_THREAD_RT=1
export LEAP_THREADS_NON_RT=1
export MDS_QUIESCED_TMR_VAL_IN_10MS=40

NID=ncs_nid
AMF=ncs_scap
DESC="Node Initialization Daemon"
BINPATH=/opt/opensaf/controller/bin
ETCPATH=/opt/opensaf/controller/scripts
export STDOUTSPATH="/var/opt/opensaf/stdouts"
export OLD_STDOUTSPATH="/var/opt/opensaf/old_stdouts"
NIDPIDFILE=/var/run/nodeinit.pid
NISPIPE=/tmp/nisfifo
SPCAPFIFO=/tmp/nodeinit.fifo
INITTIMEOUT=1000
TERMTIMEOUT=10
NISSTATUS="TIMEOUT"
TIPC_MODULE=/opt/TIPC/tipc.ko
TIPC_MANAGE=YES
SYSLOG_TAG=opensaf
STATUS=0

# Log to syslog with tag and log to console with date
# Cannot use -s to 'logger' since it will not give us date & time
log()
{
    logger -t $SYSLOG_TAG $1
    now=`date`
    echo "$now - $1"
}

# If the TIPC kernel module is not present in the OpenSAF specified location,
# OpenSAF should not manage TIPC.
if ! test -f ${TIPC_MODULE}; then
    TIPC_MANAGE=NO
fi

####################################################
# NID_ROLE_CONFIG is for flexibility to configure
# role for NID. 
# For Active:  export NID_ROLE_CONFIG=ACTIVE
# For standby: export NID_ROLE_CONFIG=STDBY
####################################################
export NID_ROLE_CONFIG="ACTIVE"


if [ ! -x $BINPATH/$NID ]; then
   log "NID Daemon Not Found. Did OpenSAF installation succeed?"
   exit 1
fi

# Make sure this (Linux) system has POSIX shared memory configured
if ! test -d /dev/shm; then
    log "POSIX shared memory not enabled, exiting."
    exit 1
fi

# Function to start the services
start()
{
    ### Remove TIPC if already installed.
    if [ "$TIPC_MANAGE" == "YES" ] && grep tipc /proc/modules >& /dev/null; then
        rmmod tipc
        if [ $? -eq 1 ]; then
            log "TIPC is already installed, Please remove TIPC module first..."
            exit 1
        fi
    fi
    
    ### Remove shared memory files created by OpenSAF services.
    rm -rf /dev/shm/opensaf
    mkdir -p /dev/shm/opensaf

    if [ -f $NIDPIDFILE ]; then 
        log  "OpenSAF is already running..";
        exit 1
    fi

    log "Starting OpenSAF Services..."

    ####################################################
    # NID_CONFIG_PATH is to configure the path for
    # NID to pickup nodeinit.conf file
    ####################################################
    export NID_CONFIG_PATH="/etc/opt/opensaf"
    export CONSOLE=/dev/tty

    ####################################################
    # NID_NCS_LOG_PATH is the path where NID would
    # place logfiles created per service by NID
    ####################################################
    export NID_NCS_LOG_PATH="/var/opt/opensaf/nidlog"
    NID_NCS_OLD_LOG_PATH="/var/opt/opensaf/old_nidlog"

    ####################################################
    #  OpenSAF settings
    ####################################################
    if [ `ulimit -c` = 0 ]; then
        ulimit -Sc $CORE_FILE_SIZE
    fi

    if [ $CORE_PATTERN_CURRENT = "core" ]; then
        echo $CORE_PATTERN > /proc/sys/kernel/core_pattern
    fi
    
    ####################################################################################                                 
    # NCS_SIMULATION_CONFIG_ROOTDIR = This the directory from where node-configuration
    # files are read. It is recognized only in SIM builds, where multiple-nodes need
    # to be simulated on a single linux-desktop for testing purposes.
    ####################################################################################
    if [ ":$2" == ":" ]; then
        NODE_NAME=""
        export NCS_SIMULATION_CONFIG_ROOTDIR="/etc/opt/opensaf"
    else
        NODE_NAME=$2
        if [ -r /etc/opt/opensaf/$2 ]; then
            export NCS_SIMULATION_CONFIG_ROOTDIR="/etc/opt/opensaf/$2"
        else
            echo "ERROR: /etc/opt/opensaf/$2 not found"
            exit 1
        fi
    fi
    
    ###  NCS_LOG_PATH = This the directory where OPENSAF logs are stored.
    ###  It is recommended that this variable not be
    ###  modified other than for SIMULATION mode.
    if [ ":$3" == ":" ]; then
        ### No explicit NCS_LOG_PATH argument.
        ### Create it using NODE_NAME
        export NCS_LOG_PATH=/var/opt/opensaf/log$NODE_NAME
        NCS_OLD_LOG_PATH=/var/opt/opensaf/old_log$NODE_NAME
    else
        export NCS_LOG_PATH=$3
    fi

    if [ -e $NID_NCS_LOG_PATH ]; then
        if [ -e $NID_NCS_OLD_LOG_PATH ]; then
            rm -rf $NID_NCS_OLD_LOG_PATH
        fi
        mv $NID_NCS_LOG_PATH $NID_NCS_OLD_LOG_PATH
    fi

    if [ -e $STDOUTSPATH ]; then
        if [ -e $OLD_STDOUTSPATH ]; then
            rm -rf $OLD_STDOUTSPATH
        fi
        mv $STDOUTSPATH $OLD_STDOUTSPATH
    fi

    mkdir -p $NID_NCS_LOG_PATH
    mkdir -p $NCS_LOG_PATH
    mkdir -p $STDOUTSPATH 

    ######################################################
    #  OpenSAF Settings END
    #####################################################

    rm -f $NISPIPE;	
    mkfifo -m 660 $NISPIPE || {
        log "Cannot create named pipe"
        exit 1
    } 

    $BINPATH/$NID > $NISPIPE &
    read -t $INITTIMEOUT NISSTATUS < $NISPIPE

    rm -f $NISPIPE
    if [ "${NISSTATUS}" != "SUCCESS" ]; then
        log "SERVICE Initialization Failed: $NISSTATUS"
        pkill -KILL -f $BINPATH/$NID
        rm -rf $NISPIPE $NIDPIDFILE
        exit 1
    fi;
    STATUS=0
    log "OpenSAF Service Initialization Success";

} #End of start()

clean_the_rest()
{
    pkill -9 nid >& /dev/null
    pkill -9 opensaf >& /dev/null
    pkill -9 ncs >& /dev/null
    if [ "$TIPC_MANAGE" == "YES" ] && grep tipc /proc/modules >& /dev/null; then
        sleep 2 # Give time for tipc to release.
        rmmod tipc
    fi
    rm -f $NIDPIDFILE $SPCAPFIFO
    rm -rf /dev/shm/opensaf
}

# Function to stop the servcies
stop()
{
    log "Stopping OpenSAF Services..."

    STATUS="TIMEOUT"

    # First Check if AMF is alive.
    AMFPID=`pgrep -f $BINPATH/$AMF`

    if [ -n "$AMFPID" ]; then
        # AMF is alive

        # Create regular file for termination response from AMF
        rm -f $SPCAPFIFO
        touch $SPCAPFIFO

        # Request AMF to stop services gracefully by sending a signal to it.
        kill -s SIGUSR1 $AMFPID 2>/dev/null

        # Wait a while for response
        timeout=$TERMTIMEOUT
        while test $timeout -gt 0; do
            sleep 1
            if test -s $SPCAPFIFO; then
                STATUS=`cat $SPCAPFIFO`
                timeout=0
            else
                timeout=$((timeout-1))
            fi
        done

        log "Hand Shake With AMF: $STATUS."
    fi

    if [ "${STATUS}" != "DONE" ]; then
        # AMF is not alive, failed to responds on time or responded with an error
        # If any remaining OpenSAF processes, kill them hard
        log "Forced termination of OpenSAF processes.";
        clean_the_rest 
        STATUS=1
    else
       # Kill the miscellaneous & non-amf.
       clean_the_rest
       log "OpenSAF Services Termination Success."
        STATUS=0
    fi

} # End of function stop()


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|try-restart)
        stop
        sleep 2 ;
        start
        ;;
    reload|force-reload)
        echo "This option is currently not supported."
        echo "."
        ;;
    status)
        if [ ! -f $NIDPIDFILE ]; then
            echo "OpenSAF is stopped."
        else
           cat /var/opt/opensaf/node_ha_state
        echo ""
        fi
        ;;
    *)
        # echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
        echo "Usage: $ETCPATH/nis_scxb {start|stop|restart|try-restart|reload|force-reload|status}" >&2
        exit 1
        ;;
esac

exit $STATUS 

