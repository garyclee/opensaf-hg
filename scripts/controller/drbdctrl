#!/bin/bash 
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Emerson Network Power
#


#
# Description:
# This script loads/unloads, starts/stops the drbd in primary/secondary state
#
# usage: drbdctrl {start|stop} {<res name>|all} {ACTIVE|STDBY}
#

DRBD="/etc/init.d/drbd"
# DRBDDISK="/etc/init.d/drbddisk"
DRBDDISK="/etc/ha.d/resource.d/drbddisk"		# for MVL
DRBDADM="/sbin/drbdadm"

MOT_DRBD_DEV="/dev/drbd0"
MOT_MNT_PNT="/repl_opensaf"
MOT_REPL_PRTN="/dev/sda5"
MOT_META_PRTN="/dev/sda6"

BIN_PATH="/opt/opensaf/controller/bin"
DRBD_CONF_PATH="/etc"
MY_DRBD_CONF_PATH="/opt/opensaf/controller/scripts"
DRBD_SYNC_FILE="/etc/opt/opensaf/.drbd_sync_state_0"

RES="$2"
ROLE_NAME="$3"
echo "Parms : $0 $1 $2 $3 $4 $5 $6 $7"
echo "Finished"
NID_MAGIC_NO="AAB49DAA"
SERV_CODE="DRBD"

PIPE="/tmp/nodeinit.fifo"

DRBD_OK=1
DRBD_LOD_ERR=2
DRBDADM_NOT_FND=3
DRBD_MNT_ERR=4
DRBD_FSCK_ERR=$DRBD_LOD_ERR    ## this error code not defined in NID code, so using existing code
DRBD_ROLE_ERR=$DRBD_LOD_ERR    ## this error code not defined in NID code, so using existing code

USAGE="Usage: drbdctrl {start|stop} {<res name>|all} {ACTIVE|STDBY}"

#### Find the SCXB's logical slot number
function find_scxb_slot_no
{
	if [ "$SCXB_SLOT_NO" = "" ] ; then		# check if slot no env. variable already present
                if [ -f /etc/opt/opensaf/slot_id ] ; then
                        SCXB_SLOT_NO=`cat /etc/opt/opensaf/slot_id`
                        if [ "$SCXB_SLOT_NO" != "1" ] && [ "$SCXB_SLOT_NO" != "2" ]
                        then
                                echo " Slot id for system controler should be 1 or 2"
                                exit
                        fi

                 else
                   echo " slot_id file not available in /etc/opt/opensaf/ "
                   exit
                fi

        export SCXB_SLOT_NO
        fi


	cp -f $MY_DRBD_CONF_PATH/drbd.$SCXB_SLOT_NO.conf $DRBD_CONF_PATH/drbd.conf
	replace_host_name_local
}

#### Replace "local" host name in each DRBD resource in the .conf file with the actual system host name
function replace_host_name_local
{
	HNAME=$( uname -n 2> /dev/null )
	cp -f $DRBD_CONF_PATH/drbd.conf /tmp/drbd.conf
	cat /tmp/drbd.conf | sed 's/HOST_NAME_LOCAL/'$HNAME'/g' > $DRBD_CONF_PATH/drbd.conf
	rm -f /tmp/drbd.conf
}

#### Find whether the NID pipe is existing or not
if [ ! -p $PIPE ]; then
	PIPE=/dev/null
fi

#### Here, at this point of initialisation start only the NCS resource, but not others
if [ "$RES" = "all" ]; then
	RES=r0
fi

case "$1" in
	start)
		case "$ROLE_NAME" in
			ACTIVE)
				;;
			STDBY)
				;;
			*)
				echo $USAGE
				exit 1
				;;
		esac

		ST=$( $DRBDADM state $RES 2> /dev/null )
		ST=${ST%/*}

		case "$ST" in
			Primary)
				echo "`date` DRBD $RES: already running as ACTIVE"
		    		exit 0
		        	;;
			Secondary)
				echo "`date` DRBD $RES: already running as STDBY"
				exit 0
				;;
		esac

		find_scxb_slot_no

		case "$ROLE_NAME" in
			ACTIVE)
				#### Check whether this was an half-baked Standby previously
				ST=$( cat $DRBD_SYNC_FILE )
				if [ "$ST" = "Inconsistent" ]; then
					retVal=$DRBD_ROLE_ERR
					echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
					echo "`date` DRBD $RES: inconsistent partition found! can not become ACTIVE!!"
					exit 1
				fi
			
				$DRBD start		# load and start the drbd module
				retVal=$?

				case "$retVal" in
					20)
						retVal=$DRBD_LOD_ERR
						echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
						echo "`date` DRBD $RES: load error"
						exit 1
						;;
					3)
						retVal=$DRBD_LOD_ERR
						echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
						echo "`date` DRBD $RES: load error"
						exit 1
						;;
					5)
						retVal=$DRBDADM_NOT_FND
						echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
						echo "`date` DRBD $RES: drbdadm not found"
						exit 1
						;;
				esac

				# put the resource in primary state
				$DRBDADM -- --overwrite-data-of-peer primary $RES
				retVal=$?

				case "$retVal" in
					20)
						retVal=$DRBD_LOD_ERR
						echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
						echo "`date` DRBD $RES: error becoming ACTIVE"
						$DRBD stop
						exit 1
						;;
				esac

                                #### Check/clean the device before mounting
                                echo "`date` DRBD $RES: running e2fsck on the partition.."
                                e2fsck -p $MOT_REPL_PRTN
                                retVal=$?

                                case "$retVal" in
                                        0)
                                                # No error
                                                echo "`date` DRBD $RES: partition is clean"
                                                ;;
                                        1)
                                                # File system errors but corrected; run e2fsck again as MVL says
                                                echo "`date` DRBD $RES: partition errors corrected, checking again.."
                                                e2fsck -y $MOT_REPL_PRTN
                                                ;;
                                        *)
                                                retVal=$DRBD_FSCK_ERR
                                                # echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
                                                echo "`date` DRBD $RES: partition is corrupt, correcting it with -y, best of luck"
                                                e2fsck -y $MOT_REPL_PRTN
                                                # $DRBD stop
                                                # exit 1
                                                ;;
                                esac

				mount $MOT_DRBD_DEV $MOT_MNT_PNT	# mount the device
				retVal=$?

				if [ $retVal -ne 0 ]; then
					retVal=$DRBD_MNT_ERR
					echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
					echo "`date` DRBD $RES: mount error"
					$DRBD stop
					exit 1
				fi

				retVal=$DRBD_OK
				echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
				echo "`date` DRBD $RES: started as ACTIVE. Ok!"
				;;

			STDBY)
				retVal=$DRBD_OK
				echo "$NID_MAGIC_NO:$SERV_CODE:$retVal" > $PIPE
				echo "`date` DRBD $RES: STDBY"
				;;

			*)
				echo $USAGE
				exit 1
				;;
		esac
		;;

	stop)
		ST=$( $DRBDADM state $RES 2> /dev/null )
		ST=${ST%/*}

		case "$ST" in
			Primary)
				;;
			Secondary)
				;;
			*)
				echo "`date` DRBD $RES: not started/running"
				exit 0
				;;
		esac

		if [ "$ST" = "Primary" ]; then
		#	fuser -mk $MOT_DRBD_DEV
			umount -f $MOT_MNT_PNT
			retVal=$?

			if [ $retVal -ne 0 ]; then
				echo "`date` DRBD $RES: unmount error"
			fi
		fi

		$DRBD stop
		echo "`date` DRBD $RES stopped. Ok!"
		;;

	*)
		echo $USAGE
		exit 1
		;;
esac

exit 0

