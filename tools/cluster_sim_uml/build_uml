#! /bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008-2009 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#

##
## build_uml [subcommand] [params...]
##
##   Build script for the Open SAF cluster simulation with User Mode
##   Linux (UML).  When invoked without a sub-command the rootfs is
##   built (for backward compatibility).
##
## Subcommands;
##

prg=`basename $0`
dir=`dirname $0`; dir=`cd $dir; pwd`
tmp=/tmp/${prg}$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}

##   help
##     Help printout.
##
cmd_help() {
    grep '^##' $dir/$prg | cut -c3-
}

if test "$(uname -m)" = "x86_64"; then
    lib_dir=lib64
else
    lib_dir=lib
fi

# XERCES_PREFIX and NETSNMP_PREFIX can be set in the environment to point to an
# alternative installation directory. Set the variables to the directory above 
# where the lib and bin directories are located. See the default setting below.
xerces_prefix=${XERCES_PREFIX:-"/usr/local"}
xerces_lib="$xerces_prefix/$lib_dir"
if test -n "$NETSNMP_PREFIX"; then
    netsnmp_prefix=$NETSNMP_PREFIX
    netsnmp_lib=$netsnmp_prefix/$lib_dir
else
    netsnmp_prefix=`net-snmp-config --prefix`
    netsnmp_lib=`net-snmp-config --libdir | sed 's/\-L//g'`
fi

opensaf_home=$(cd ../..; pwd)
top=`pwd`
bin=$top/bin
archive=$top/archive
scripts=$archive/scripts
root=$top/rootfs


##   getlibs prog [prog...]
##     Return required (and found) dynamic libs for programs.
##
cmd_getlibs() {
    for n in $@; do
	test -x $n || continue
	file -L $n | grep -q "dynamically linked\|shared object" || continue
	ldd $n | grep -o '/[^ ]*' | sed -e 's,/tls,,'
    done
}


##   install_testprog
##     Building and installing the test program.
##
cmd_install_testprog() {
    src=$opensaf_home/samples/avsv
    libd=$top/rootfs/usr/local/$lib_dir
    installd=$top/rootfs/opt/amf_demo
    immxml=$top/rootfs/etc/opensaf/imm.xml

    mkdir -p $installd
    cp $src/amf_demo_script $installd
    gcc -g -O2 -Wall -fPIC -I$opensaf_home/osaf/libs/saf/include \
	-o $installd/amf_demo $src/amf_comp_template.c \
	-L$libd -lSaAmf -L$libd/opensaf -lavsv_common -lopensaf_core

    test -r $immxml.orig || cp $immxml $immxml.orig
    $opensaf_home/tools/devel/immtools/immxml-merge \
	$immxml.orig $src/AppConfig-2N.xml > $immxml
    $opensaf_home/tools/devel/immtools/immxml-validate $immxml
}

##   create_rootfs
##     Create a (shadow) rootfs with OpenSAF and other required programs.
##
cmd_create_rootfs()
{
    # Check that we can find everything needed
    test -e $netsnmp_lib/libnetsnmp.so || \
	die "cannot find net-snmp libraries in: $netsnmp_lib"
    test -e $xerces_lib/libxerces-c.so || \
	die "Cannot find xerces libraries in: $xerces_lib"

    echo "(Re-)Creating new root file system..."
    rm -rf $root
    mkdir $root

    cd $root
    echo "Setup dirs and links..."
    if test "$(uname -m)" = "x86_64"; then
	mkdir -p sbin bin lib64 usr/lib64 usr/sbin usr/bin usr/share/snmp/mibs
	mkdir -p etc/snmp etc/default etc/init.d
	ln -s lib64 usr/lib
	ln -s lib64 lib
    else
	mkdir -p sbin bin lib usr/lib usr/sbin usr/bin usr/share/snmp/mibs
	mkdir -p etc/snmp etc/default etc/init.d
    fi

    echo "Installing OpenSAF (takes some time)..."
    if ! make -C $opensaf_home DESTDIR=$root -j3 install>$tmp/install.log 2>&1
    then
	cat $tmp/install.log
	die "Failed to install OpenSAF"
    fi
    rm -rf $root/usr/local/share/opensaf/samples \
	$root/usr/local/include \
	$root/usr/local/share/doc \
	$root/usr/local/lib/pkgconfig \
	$root/usr/local/lib/opensaf/*.a \
	$root/usr/local/lib/opensaf/*.la \
	$root/usr/local/lib/*.a $root/usr/local/lib/*.la 

    echo "Installing Xerces files from: $xerces_lib"
    cp $xerces_lib/libxerces-c.so* $root/usr/$lib_dir

    echo "Installing net-snmp files from: $netsnmp_prefix"
    cp $netsnmp_lib/libnetsnmp*.so* $root/usr/$lib_dir
    install $netsnmp_prefix/sbin/snmp* usr/sbin
    install $netsnmp_prefix/bin/snmp* usr/bin
    install $netsnmp_prefix/share/snmp/mibs/* usr/share/snmp/mibs
    # Move the OpenSAF mibs to the standard location for simplicity
    mv usr/local/share/snmp/mibs/* usr/share/snmp/mibs
    # Required by e.g. the snmpd script
    cp $archive/snmp*d.conf etc/snmp
    
    install -m 755 $archive/scripts/snmpd etc/init.d
    install -m 755 $archive/scripts/*.rc etc/init.d
    cp $scripts/profile etc
    
    echo "Copy some needed extra programs (bash, ...)"
    install /bin/bash bin
    install /usr/bin/pgrep usr/bin
    install /usr/bin/pkill usr/bin
    install /usr/bin/killall usr/bin
    # Needed by dtsv archive rotation
    install /bin/tar bin
    install $(which nice) usr/bin
    
    # Change LOG configuration to use "replicated" disk
    sed -i 's/=${LOCALSTATEDIR}\/saflog/=repl_opensaf\/saflog/g' \
	etc/opensaf/saflog.conf

    install $archive/rde.conf etc/opensaf

    # The var directory structure is setup from within each UML
    rm -rf var/*

    # Copy local timezone settings
    test -f /etc/localtime && install /etc/localtime etc

    # Create a dummy /etc/hosts file, will be populated at start
    touch $root/etc/hosts

    if test -n "$INSTALL_TESTPROG"; then
	echo "Building and installing test program"
	cmd_install_testprog
    fi

    echo "Installing required dynamic libs..."
    cmd_installibs

    echo "Creating [$root/root.cpio] ..."
    cd $top
    cmd_mkcpio
}

##   installibs
##     Install required dynamic libraries.
##     Xerces, lib-snmp opensaf dependencies are excluded.
##
cmd_installibs() {
    local deplib=$tmp/deplib
    cd $root
    cmd_getlibs $xerces_lib/libxerces-c.so \
	$(find . -name immload) ./bin/* ./usr/bin/* ./usr/sbin/* |\
	grep -v -e 'libSa\|libimmsv\|libncs\|libsaf\|netsnmp\|libxerces' \
	-e "^/$lib_dir/ld-\|^/$lib_dir/libc.so" > $deplib

    for n in $(cat $deplib | sort | uniq); do
	dst=usr/$lib_dir
	echo $n | grep -q '^/lib' && dst=$lib_dir
	echo "  $n -> rootfs/$dst/$(basename $n)"
	cp -L $n $dst || die "Failed [cp -R $n $dst]"
    done
}


##   mklndircpio <fromdir> <archive> [prefix]
##     Creates cpio archive with a link-tree with absolute links.
##
cmd_mklndircpio() {
    test -n "$1" -a -n "$2" || die "Missing param"
    test -d "$1" || die "Not a directory [$1]"
    archive=$2
    prefix=${3:-/hostfs/rootfs}
    tmpd=$tmp/mklndircpio$$
    echo $archive | grep -q "^/" || $archive=$top/$archive
    rm -f $archive
    cd $1
    items=`find ./ | sed -e 's,./,,'`
    for n in $items; do
	if test -d $n; then
	    mkdir -p $tmpd/$n || die "Can't create dir [$tmpd/$n]"
	else
	    ln -s $prefix/$n $tmpd/$n || die "Can't create link [$tmpd/$n]"
	fi
    done
    cd $tmpd
    echo $items | tr ' ' '\n' | cpio -o -H newc > $archive
}

##   mkcpio
##     Re-build the "rootfs/root.cpio" file using the "mklndircpio"
##     sub-command.
##
cmd_mkcpio() {
    cmd_mklndircpio $root $root/root.cpio /hostfs/rootfs >& /dev/null ||\
	die Failed
}

##   default
##     Backward compatible default command.
##
cmd_default() {
    if find rootfs -name ncs_nid >& /dev/null; then
	echo "OpenSAF seems to be installed already, cowardly refusing..."
	echo "   Remove directory 'rootfs' if a fresh install is needed"
	exit 0
    fi

    # Build the Linux UML binary
    ./uml/build_uml all || die "build of UML Linux kernel failed"
    cmd_create_rootfs
}


# Get the command
if test -n "$1"; then
    cmd=$1
    shift
else
    cmd=default
fi
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"
trap "die Interrupted" INT TERM
mkdir -p $tmp
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
