#! /bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008-2009 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
#

error_exit () {
  echo "Exiting due to error in line $1"
  exit 1
}

copy_so_deps () {
 for so in `ldd $1 | grep '=>' | sed 's/.*=> \([^ ]*\).*/\1/' | grep -v libc.so`
  do
    cp -vL $so $2
  done
}
arch=$(uname -m)
if [ $arch = x86_64 ]; then
    lib_dir=lib64
else
    lib_dir=lib
fi

# XERCES_PREFIX and NETSNMP_PREFIX can be set in the environment to point to an
# alternative installation directory. Set the variables to the directory above 
# where the lib and bin directories are located. See the default setting below.
xerces_prefix=${XERCES_PREFIX:-"/usr/local"}
if [ -e "${XERCES_PREFIX}/$lib_dir" ]; then
  xerces_lib="${XERCES_PREFIX}/$lib_dir"
else
  xerces_lib="/usr/$lib_dir"
fi

netsnmp_prefix=`net-snmp-config --prefix`
netsnmp_lib=`net-snmp-config --libdir | sed 's/\-L//g'`

opensaf_home=$(cd ../..; pwd)
top=`pwd`
bin=$top/bin
archive=$top/archive
scripts=$archive/scripts

die() {
    echo "ERROR: $*"
    rm -rf $root
    exit 1
}

# Check that we can find everything needed
test -e $netsnmp_lib/libnetsnmp.so || \
    die "cannot find net-snmp libraries in: $netsnmp_lib"
test -e $xerces_lib/libxerces-c.so || \
    die "Cannot find xerces libraries in: $xerces_lib"


install_testprog() {
    echo "Building and installing test program"
    src=$opensaf_home/samples/avsv
    libd=$top/rootfs/usr/local/$lib_dir
    installd=$top/rootfs/opt/amf_demo
    immxml=$top/rootfs/etc/opensaf/imm.xml

    mkdir -p $installd
    cp $src/amf_demo_script $installd
    gcc -g -O2 -Wall -fPIC -I$opensaf_home/osaf/libs/saf/include \
	-o $installd/amf_demo $src/amf_comp_template.c \
	-L$libd -lSaAmf -L$libd/opensaf -lavsv_common -lopensaf_core

    test -r $immxml.orig || cp $immxml $immxml.orig
    $opensaf_home/tools/devel/immtools/immxml-merge \
	$immxml.orig $src/AppConfig-2N.xml > $immxml
    $opensaf_home/tools/devel/immtools/immxml-validate $immxml
}

create_rootfs()
{
    local root=$top/rootfs
    local opensafconfig=$root/etc/opensaf

    echo "Removing old root file system: $root"
    rm -rf $root
    echo "Creating new root file system ..."
    mkdir $root
    
    cd $root
    if [ $(uname -m) = x86_64 ]; then
      mkdir -p sbin bin lib64 usr/lib64 usr/sbin usr/bin usr/share/snmp/mibs
      mkdir -p etc/snmp etc/default etc/init.d
      ln -s lib64 usr/lib
      ln -s lib64 lib
    else
      mkdir -p sbin bin lib usr/lib usr/sbin usr/bin usr/share/snmp/mibs
      mkdir -p etc/snmp etc/default etc/init.d
    fi

    echo "Installing OpenSAF"
    make -C $opensaf_home DESTDIR=$root -j3 install
    rm -rf $root/usr/local/share/opensaf/samples

    echo "Installing net-snmp files from: $netsnmp_prefix"
    install $netsnmp_lib/libnetsnmp*.so* usr/$lib_dir
    install $netsnmp_prefix/sbin/snmp* usr/sbin
    install $netsnmp_prefix/bin/snmp* usr/bin
    install $netsnmp_prefix/share/snmp/mibs/* usr/share/snmp/mibs

    # Move the OpenSAF mibs to the standard location for simplicity
    mv usr/local/share/snmp/mibs/* usr/share/snmp/mibs

    echo "   Resolve snmpd dependencies"
    cp -L `ldd usr/sbin/snmpd | tr -s ' \t' '\n' | grep /lib | \
        grep -v usr | grep -v netsnmp | sed -e 's,/tls,,'` usr/$lib_dir

    # The var directory structure is setup from within each UML
    rm -rf var/*

    # Required by e.g. the snmpd script
    cp $archive/snmp*d.conf etc/snmp
    
    install -m 755 $archive/scripts/snmpd etc/init.d
    install -m 755 $archive/scripts/*.rc etc/init.d
    cp $scripts/profile etc
    
    echo "Copy some needed extra programs (bash, ...)"
    install /bin/bash bin
    install /usr/bin/pgrep usr/bin
    install /usr/bin/pkill usr/bin
    install /usr/bin/killall usr/bin

    echo "Resolve binary dependencies"
    copy_so_deps /bin/bash $lib_dir
    copy_so_deps /usr/bin/pgrep usr/$lib_dir
    copy_so_deps /usr/bin/pkill usr/$lib_dir
    copy_so_deps /usr/bin/killall usr/$lib_dir

    # Needed by dtsv archive rotation
    install /bin/tar bin
    install $(which nice) usr/bin
    
    echo "Resolve OpenSAF dependencies"
    cp /$lib_dir/librt.so.* $lib_dir || error_exit $LINENO
    cp /$lib_dir/libz.so.* $lib_dir || cp /usr/$lib_dir/libz.so.* $lib_dir || error_exit $LINENO
    cp /$lib_dir/libgcc_s.so.* $lib_dir || error_exit $LINENO
    cp -a /usr/$lib_dir/libstdc++.* $lib_dir || error_exit $LINENO
    install $xerces_lib/libxerces-c.so* $lib_dir || error_exit $LINENO

    echo "Resolve IMM dependencies"
    immload=`find . -name immload`
    if [ $? -eq 0 ]; then
        copy_so_deps $immload usr/$lib_dir
    fi

    install $archive/rde.conf etc/opensaf

    echo "Resolve xerces dependencies"
    cp -L `ldd $xerces_lib/libxerces-c.so | tr -s ' \t' '\n' | \
        grep /lib | sed -e 's,/tls,,'` usr/$lib_dir

    # Change LOG configuration to use "replicated" disk
    sed -i 's/=${LOCALSTATEDIR}\/saflog/=repl_opensaf\/saflog/g' etc/opensaf/saflog.conf

    # Copy local timezone settings
    test -f /etc/localtime && install /etc/localtime etc
    cd $top

    # Create a dummy /etc/hosts file, will be populated at start
    touch $root/etc/hosts

    test -n "$INSTALL_TESTPROG" && install_testprog
    rm -rf $root/usr/local/include

    echo "Creating [$root/root.cpio] ..."
    $bin/mklndircpio $root $root/root.cpio /hostfs/rootfs >& /dev/null
}


if find rootfs -name ncs_nid >& /dev/null; then
    echo "OpenSAF seems to be installed already, cowardly refusing..."
    echo "   Remove directory 'rootfs' if a fresh install is needed"
    exit 0
fi

# Build the Linux UML binary
./uml/build_uml all || die "build of UML Linux kernel failed"
create_rootfs

