/*
 * smi.h --
 *
 *      Interface Definition of libsmi (version 2:21:0).
 *
 * Copyright (c) 1999,2000 Frank Strauss, Technical University of Braunschweig.
 *
 * See the file "COPYING" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * @(#) $Id: smi.h.in,v 1.41 2002/11/13 13:15:03 strauss Exp $
 */

#ifndef _SMI_H
#define _SMI_H

#include <stdlib.h>
#include <stdarg.h>
#include <time.h>


#ifdef __cplusplus
extern "C" {
#endif

/* NCS compiler switch flags for NET-SNMP & for MIB-LIB */
#ifndef NCS_NETSNMP
#define NCS_NETSNMP  1
#endif

#ifndef NCS_MIBLIB
#define NCS_MIBLIB   1
#endif

#define SMI_LIBRARY_VERSION "2:21:0"
extern const char *smi_library_version;

#define SMI_VERSION_MAJOR 0
#define SMI_VERSION_MINOR 4
#define SMI_VERSION_PATCHLEVEL 1
#define SMI_VERSION_STRING "0.4.1"
extern const char *smi_version_string;


#define SMI_FLAG_NODESCR   0x0800 /* do not load descriptions/references.    */
#define SMI_FLAG_VIEWALL   0x1000 /* all modules are `known', need no views. */
#define SMI_FLAG_ERRORS    0x2000 /* print parser errors.                    */
#define SMI_FLAG_RECURSIVE 0x4000 /* recursively parse imported modules.     */
#define SMI_FLAG_STATS     0x8000 /* print statistics after parsing module.  */
#define SMI_FLAG_MASK      (SMI_FLAG_NODESCR|SMI_FLAG_VIEWALL|SMI_FLAG_STATS|\
             SMI_FLAG_RECURSIVE|SMI_FLAG_ERRORS)



/* misc mappings of SMI types to C types                                     */
typedef char                    *SmiIdentifier;
typedef unsigned long           SmiUnsigned32;
typedef long                    SmiInteger32;
#ifdef _MSC_VER /* if using MSVC and not configure */
typedef __int64                 SmiInteger64;
typedef unsigned __int64        SmiUnsigned64;
#else
typedef unsigned long long           SmiUnsigned64;
typedef long long            SmiInteger64;
#endif
typedef unsigned int            SmiSubid;
typedef float                   SmiFloat32;
typedef double                  SmiFloat64;
typedef long double             SmiFloat128;



/* SmiLanguage -- language of an actual MIB module                           */
typedef enum SmiLanguage {
    SMI_LANGUAGE_UNKNOWN                = 0,  /* should not occur            */
    SMI_LANGUAGE_SMIV1                  = 1,
    SMI_LANGUAGE_SMIV2                  = 2,
    SMI_LANGUAGE_SMING                  = 3,
    SMI_LANGUAGE_SPPI                   = 4
} SmiLanguage;

/* SmiBasetype -- base types of all languages                                */
typedef enum SmiBasetype {
    SMI_BASETYPE_UNKNOWN                = 0,  /* should not occur            */
    SMI_BASETYPE_INTEGER32              = 1,  /* also SMIv1/v2 INTEGER       */
    SMI_BASETYPE_OCTETSTRING            = 2,
    SMI_BASETYPE_OBJECTIDENTIFIER       = 3,
    SMI_BASETYPE_UNSIGNED32             = 4,
    SMI_BASETYPE_INTEGER64              = 5,  /* SMIng and SPPI              */
    SMI_BASETYPE_UNSIGNED64             = 6,  /* SMIv2, SMIng and SPPI       */
    SMI_BASETYPE_FLOAT32                = 7,  /* only SMIng                  */
    SMI_BASETYPE_FLOAT64                = 8,  /* only SMIng                  */
    SMI_BASETYPE_FLOAT128               = 9,  /* only SMIng                  */
    SMI_BASETYPE_ENUM                   = 10,
    SMI_BASETYPE_BITS                   = 11  /* SMIv2, SMIng and SPPI       */
} SmiBasetype;

/* SmiStatus -- values of status levels                                      */
typedef enum SmiStatus {
    SMI_STATUS_UNKNOWN          = 0, /* should not occur                     */
    SMI_STATUS_CURRENT          = 1, /* only SMIv2, SMIng and SPPI           */
    SMI_STATUS_DEPRECATED       = 2, /* SMIv1, SMIv2, SMIng and SPPI         */
    SMI_STATUS_MANDATORY        = 3, /* only SMIv1                           */
    SMI_STATUS_OPTIONAL         = 4, /* only SMIv1                           */
    SMI_STATUS_OBSOLETE         = 5  /* SMIv1, SMIv2, SMIng and SPPI         */
} SmiStatus;

/* SmiAccess -- values of access levels                                      */
typedef enum SmiAccess {
    SMI_ACCESS_UNKNOWN          = 0, /* should not occur                     */
    SMI_ACCESS_NOT_IMPLEMENTED  = 1, /* only for agent capability variations */
    SMI_ACCESS_NOT_ACCESSIBLE   = 2, /* the values 2 to 5 are allowed to be  */
    SMI_ACCESS_NOTIFY           = 3, /* compared by relational operators.    */
    SMI_ACCESS_READ_ONLY        = 4,
    SMI_ACCESS_READ_WRITE       = 5,
    SMI_ACCESS_INSTALL          = 6, /* these three entries are only valid   */
    SMI_ACCESS_INSTALL_NOTIFY   = 7, /* for SPPI                             */
    SMI_ACCESS_REPORT_ONLY      = 8
} SmiAccess;

/* SmiNodekind -- type or statement that leads to a definition               */
typedef unsigned int SmiNodekind;
#define SMI_NODEKIND_UNKNOWN      0x0000     /* should not occur             */
#define SMI_NODEKIND_NODE         0x0001
#define SMI_NODEKIND_SCALAR       0x0002
#define SMI_NODEKIND_TABLE        0x0004
#define SMI_NODEKIND_ROW          0x0008
#define SMI_NODEKIND_COLUMN       0x0010
#define SMI_NODEKIND_NOTIFICATION 0x0020
#define SMI_NODEKIND_GROUP        0x0040
#define SMI_NODEKIND_COMPLIANCE   0x0080
#define SMI_NODEKIND_CAPABILITIES 0x0100
#define SMI_NODEKIND_ANY          0xffff

/* SmiDecl -- type or statement that leads to a definition                   */
typedef enum SmiDecl {
    SMI_DECL_UNKNOWN            = 0,  /* should not occur                    */
    /* SMIv1/v2 ASN.1 statements and macros */
    SMI_DECL_IMPLICIT_TYPE      = 1,
    SMI_DECL_TYPEASSIGNMENT     = 2,
    SMI_DECL_IMPL_SEQUENCEOF    = 4,   /* this will go away */
    SMI_DECL_VALUEASSIGNMENT    = 5,
    SMI_DECL_OBJECTTYPE         = 6,    /* values >= 6 are assumed to be */
    SMI_DECL_OBJECTIDENTITY     = 7,    /* registering an OID, see check.c */
    SMI_DECL_MODULEIDENTITY     = 8,
    SMI_DECL_NOTIFICATIONTYPE   = 9,
    SMI_DECL_TRAPTYPE           = 10,
    SMI_DECL_OBJECTGROUP        = 11, 
    SMI_DECL_NOTIFICATIONGROUP  = 12,
    SMI_DECL_MODULECOMPLIANCE   = 13,
    SMI_DECL_AGENTCAPABILITIES  = 14,
    SMI_DECL_TEXTUALCONVENTION  = 15,
    /* SMIng statements */
    SMI_DECL_MODULE             = 33,
    SMI_DECL_EXTENSION          = 34,
    SMI_DECL_TYPEDEF            = 35,
    SMI_DECL_NODE               = 36,
    SMI_DECL_SCALAR             = 37,
    SMI_DECL_TABLE              = 38,
    SMI_DECL_ROW                = 39,
    SMI_DECL_COLUMN             = 40,
    SMI_DECL_NOTIFICATION       = 41,
    SMI_DECL_GROUP              = 42,
    SMI_DECL_COMPLIANCE         = 43
} SmiDecl;

/* SmiIndexkind -- actual kind of a table row's index method                 */
typedef enum SmiIndexkind {
    SMI_INDEX_UNKNOWN           = 0, 
    SMI_INDEX_INDEX             = 1,
    SMI_INDEX_AUGMENT           = 2,
    SMI_INDEX_REORDER           = 3,
    SMI_INDEX_SPARSE            = 4,
    SMI_INDEX_EXPAND            = 5
} SmiIndexkind;

/* enums for ASN.1 types */
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
typedef enum EsmiAsntype{
   ESMI_ASN_NULL = 1,         
   ESMI_ASN_INTEGER,      
   ESMI_ASN_OCTET_STR,    
   ESMI_ASN_OBJECT_ID,    
   ESMI_ASN_IPADDRESS,    
   ESMI_ASN_UNSIGNED,      
   ESMI_ASN_COUNTER,      
   ESMI_ASN_GAUGE,        
   ESMI_ASN_TIMETICKS,    
   ESMI_ASN_OPAQUE,       
   ESMI_ASN_COUNTER64,
   ESMI_ASN_MAX   
} EsmiAsntype;
#endif

/* SmiValue -- any single value; for use in default values and subtyping     */
typedef struct SmiValue {
    SmiBasetype             basetype;
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
    EsmiAsntype             asntype;
#endif
    unsigned int            len;         /* OID, OctetString, Bits           */
    union {
        SmiUnsigned64       unsigned64;
        SmiInteger64        integer64;
        SmiUnsigned32       unsigned32;
        SmiInteger32        integer32;
        SmiFloat32          float32;
        SmiFloat64          float64;
        SmiFloat128         float128;
        SmiSubid            *oid;
        unsigned char       *ptr;    /* OctetString, Bits                */
    } value;
} SmiValue;

/* SmiNamedNumber -- a named number; for enumeration and bitset types        */
typedef struct SmiNamedNumber {
    SmiIdentifier       name;
    SmiValue            value;
} SmiNamedNumber;

/* SmiRange -- a min-max value range; for subtyping of sizes or numbers      */
typedef struct SmiRange {
    SmiValue            minValue;
    SmiValue            maxValue;
} SmiRange;

#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
/* ESMI Module data structure defined for NCS */
typedef struct esmiModuleData
{ 
    /* TRUE:  If the code needs to be dumped  
     * FALSE: Do not dump the code for this 
     */ 
    int     dumpCode; 

    /* A flag is used to indicate that, this
       particular module should be considered for generating 
       code.  This flag is set, if the parent is imported from
       some MIB. 
       Default: 0 (zero)
                1 (If any of the node from this module is imported
                   and code needs to be generated for that node.)
     */ 
     int    imported; 
} EsmiModuleData;   
#endif /* NCS_NETSNMP || NCS_MIBLIB  */

/* SmiNode -- the main structure of any clause that defines a node           */
/* SmiModule -- the main structure of a module                               */
typedef struct SmiModule {
    SmiIdentifier       name;
    char                *path;
    char                *organization;
    char                *contactinfo;
    char                *description;
    char                *reference;
    SmiLanguage         language;
    int                 conformance;
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
    EsmiModuleData      esmi;    /* ESMI Module data structure defined for NCS */
#endif /* NCS_NETSNMP || NCS_MIBLIB  */
} SmiModule;

/* SmiRevision -- content of a single module's revision clause               */
typedef struct SmiRevision {
    time_t              date;
    char                *description;
} SmiRevision;

/* SmiImport -- an imported descriptor                                       */
typedef struct SmiImport {
    SmiIdentifier       module;
    SmiIdentifier       name;
} SmiImport;

/* SmiMacro -- the main structure of a SMIv1/v2 macro or SMIng extension     */
typedef struct SmiMacro {
    SmiIdentifier       name;
    SmiDecl             decl;
    SmiStatus           status;
    char                *description;
    char                *reference;
} SmiMacro;

/* SmiType -- the main structure of a type definition (also base types)      */
typedef struct SmiType {
    SmiIdentifier       name;
    SmiBasetype         basetype;
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
   EsmiAsntype          asntype;
#endif
    SmiDecl             decl;
    char                *format;
    SmiValue            value;
    char                *units;
    SmiStatus           status;
    char                *description;
    char                *reference;
} SmiType;


/* NCS ESMI data structs STARTs */
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))

extern int  esmiError;
extern char *mapiDirPath;
extern char *subAgtDirPath;
extern char *esmiDirPath;
extern char *esmiGlbHdrFile;
extern char *pssvDirPath;
extern char *esmiCopyRightFile;

#define ESMI_MIB_FILE_NAME  "esmi_"
#define ESMI_NULL_STR       "ESMI_NULL"

/* Macros defined for the extensions of stub file names */
#define ESMI_TEMP_MIB_FILE     "TEMP_ESMI_DUMP.MIB";
#define ESMI_APPL_NAME_H_FILE  "_subagt_init.h"
#define ESMI_APPL_NAME_C_FILE  "_subagt_init.c"
#define ESMI_MAPI_H_FILE       "_mapi.h"
#define ESMI_MIBLIB_C_FILE     "_mib.c"
#define ESMI_PSSV_C_FILE       "_pssv_mib.c"
#define ESMI_PSSV_H_FILE       "_pssv_mib.h"
#define ESMI_APPL_NAME_PSSV_H_FILE  "_pssv_init.h"
#define ESMI_APPL_NAME_PSSV_C_FILE  "_pssv_init.c"
#define ESMI_MODULE_H_FILE     "_agt_stub.h"
#define ESMI_MODULE_C_FILE     "_agt_stub.c"


/* Macros for ESMI return values */
#define ESMI_SNMP_SUCCESS 1
#define ESMI_SNMP_FAILURE 0
#define TRUE              1
#define FALSE             0


/* delete the file, if it exists */
#define ESMI_FILE_DELETE(file) if(!access(file, R_OK)) \
                              { \
                               unlink(file); \
                              }

typedef enum esmiRegOpt
{
   ESMI_REGISTER_FLAG = 1,
   ESMI_UNREGISTER_FLAG
} EsmiRegOpt;

typedef enum esmi_netsnmp_option
{
   ESMI_NETSNMP_NULL_OPT,
   ESMI_SYN_NETSNMP_OPT,
   ESMI_ASYN_NETSNMP_OPT, 
   ESMI_NEW_SYN_NETSNMP_OPT,
   ESMI_MAPI_OPT,
   ESMI_MIBLIB_OPT,
   ESMI_PSSV_OPT
} ESMI_NETSNMP_OPTION;

typedef enum
{
   ESMI_TABLE_DATA = 1,
   ESMI_OBJECT_DATA
} ESMI_DATA_KIND;

typedef struct esmiTableInfo
{
   char tableId[64];
   char hdrFile[64];
   char dirPath[256];
   char capability[64];
   char psrRank[256];
   int  isStatic;
   int  isPersistent;
   int  isSparseTbl;
   int  line;
   int  read_write_flag;
   char tableVersion;
} EsmiTableInfo;

/* Object spec given as a string (macros) or values (integers) */
typedef enum esmiObjSpecType
{
   ESMI_OBJ_STR_TYPE = 1,
   ESMI_OBJ_NUM_TYPE
} EsmiObjType;

typedef struct esmiObjSpecStr
{
   char  str1[64];
   char  str2[64];
} EsmiObjSpecStr;

typedef struct esmiObjSpecVal
{
   int   val1;
   int   val2;
} EsmiObjSpecVal;

typedef struct esmiObjectInfo
{
   int   isPersistent;
   char  baseAddress[64];
   char  member[64];
   EsmiObjType  objLenType;
   union
   {
      int   val;
      char  objLen[64];
   } objLenInfo;
   int   setWhenDown;
   char  objRangeType[64];
   int   line;
   EsmiObjType  objSpecType;
   union
   {
       EsmiObjSpecStr objSpecStr;
       EsmiObjSpecVal objSpecVal;
   } objSpecInfo;
} EsmiObjectInfo;

typedef struct esmiData
{
    ESMI_DATA_KIND  esmiDataKind;
    union
    {
        EsmiTableInfo   tableInfo;
        EsmiObjectInfo  objectInfo;
    }info;
} EsmiData;

#endif /* NCS_NETSNMP || NCS_MIBLIB  */

/* SmiNode -- the main structure of any clause that defines a node           */
typedef struct SmiNode {
    SmiIdentifier       name;
    unsigned int   oidlen;
    SmiSubid      *oid;         /* array of length oidlen */
    SmiDecl             decl;
    SmiAccess           access;
    SmiStatus           status;
    char                *format;
    SmiValue            value;
    char                *units;
    char                *description;
    char                *reference;
    SmiIndexkind        indexkind;    /* only valid for rows */
    int                 implied;      /* only valid for rows */
    int                 create;       /* only valid for rows */
    SmiNodekind         nodekind;
#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
    EsmiData            esmi;    /* ESMI data structure defined for NCS */
#endif /* NCS_NETSNMP || NCS_MIBLIB  */
} SmiNode;

/* SmiElement -- an item in a list (row index column, notification object)   */
typedef struct SmiElement {
#ifndef __GNUC__
    char dummy;      /* many compilers are unhappy with empty structures. */
#endif
    /* no visible attributes */
} SmiElement;

/* SmiOption -- an optional group in a compliance statement                  */
typedef struct SmiOption {
    char                *description;
} SmiOption;

/* SmiRefinement -- a refined object in a compliance statement               */
typedef struct SmiRefinement {
    SmiAccess           access;
    char                *description;
} SmiRefinement;



extern int smiInit(const char *tag);

extern void smiExit(void);

extern void smiSetErrorLevel(int level);

extern int smiGetFlags(void);

extern void smiSetFlags(int userflags);

extern char *smiGetPath(void);

extern int smiSetPath(const char *path);

extern void smiSetSeverity(char *pattern, int severity);

extern int smiReadConfig(const char *filename, const char *tag);

extern char *smiLoadModule(const char *module);

extern int smiIsLoaded(const char *module);


typedef void (SmiErrorHandler) (char *path, int line, int severity, char *msg, char *tag);

extern void smiSetErrorHandler(SmiErrorHandler smiErrorHandler);


extern SmiModule *smiGetModule(const char *module);

extern SmiModule *smiGetFirstModule(void);

extern SmiModule *smiGetNextModule(SmiModule *smiModulePtr);
      
extern SmiNode *smiGetModuleIdentityNode(SmiModule *smiModulePtr);

extern SmiImport *smiGetFirstImport(SmiModule *smiModulePtr);

extern SmiImport *smiGetNextImport(SmiImport *smiImportPtr);

extern int smiIsImported(SmiModule *smiModulePtr,
          SmiModule *importedModulePtr, char *importedName);

extern SmiRevision *smiGetFirstRevision(SmiModule *smiModulePtr);

extern SmiRevision *smiGetNextRevision(SmiRevision *smiRevisionPtr);

extern int smiGetRevisionLine(SmiRevision *smiRevisionPtr);


extern SmiType *smiGetType(SmiModule *smiModulePtr, char *type);

extern SmiType *smiGetFirstType(SmiModule *smiModulePtr);

extern SmiType *smiGetNextType(SmiType *smiTypePtr);

extern SmiType *smiGetParentType(SmiType *smiTypePtr);

extern SmiModule *smiGetTypeModule(SmiType *smiTypePtr);

extern int smiGetTypeLine(SmiType *smiTypePtr);

extern SmiRange *smiGetFirstRange(SmiType *smiTypePtr);

extern SmiRange *smiGetNextRange(SmiRange *smiRangePtr);

extern SmiNamedNumber *smiGetFirstNamedNumber(SmiType *smiTypePtr);

extern SmiNamedNumber *smiGetNextNamedNumber(SmiNamedNumber
                        *smiNamedNumberPtr);


extern SmiMacro *smiGetMacro(SmiModule *smiModulePtr, char *macro);

extern SmiMacro *smiGetFirstMacro(SmiModule *smiModulePtr);

extern SmiMacro *smiGetNextMacro(SmiMacro *smiMacroPtr);

extern SmiModule *smiGetMacroModule(SmiMacro *smiMacroPtr);



extern SmiNode *smiGetNode(SmiModule *smiModulePtr, const char *name);

extern SmiNode *smiGetNodeByOID(unsigned int oidlen, SmiSubid oid[]);

extern SmiNode *smiGetFirstNode(SmiModule *smiModulePtr, SmiNodekind nodekind);

extern SmiNode *smiGetNextNode(SmiNode *smiNodePtr, SmiNodekind nodekind);

extern SmiNode *smiGetParentNode(SmiNode *smiNodePtr);

extern SmiNode *smiGetRelatedNode(SmiNode *smiNodePtr);

extern SmiNode *smiGetFirstChildNode(SmiNode *smiNodePtr);

extern SmiNode *smiGetNextChildNode(SmiNode *smiNodePtr);

extern SmiModule *smiGetNodeModule(SmiNode *smiNodePtr);

extern SmiType *smiGetNodeType(SmiNode *smiNodePtr);

extern int smiGetNodeLine(SmiNode *smiNodePtr);




extern SmiElement *smiGetFirstElement(SmiNode *smiNodePtr);

extern SmiElement *smiGetNextElement(SmiElement *smiElementPtr);

extern SmiNode *smiGetElementNode(SmiElement *smiElementPtr);



extern SmiOption *smiGetFirstOption(SmiNode *smiComplianceNodePtr);

extern SmiOption *smiGetNextOption(SmiOption *smiOptionPtr);

extern SmiNode *smiGetOptionNode(SmiOption *smiOptionPtr);



extern SmiRefinement *smiGetFirstRefinement(SmiNode *smiComplianceNodePtr);

extern SmiRefinement *smiGetNextRefinement(SmiRefinement *smiRefinementPtr);

extern SmiNode *smiGetRefinementNode(SmiRefinement *smiRefinementPtr);

extern SmiType *smiGetRefinementType(SmiRefinement *smiRefinementPtr);

extern SmiType *smiGetRefinementWriteType(SmiRefinement *smiRefinementPtr);


extern SmiElement *smiGetFirstUniquenessElement(SmiNode *smiNodePtr);

#define smiGetNextUniquenessElement(p) smiGetNextElement(p)

extern char *smiRenderOID(unsigned int oidlen, SmiSubid *oid, int flags);

extern char *smiRenderValue(SmiValue *smiValuePtr, SmiType *smiTypePtr,
             int flags);

extern char *smiRenderNode(SmiNode *smiNodePtr, int flags);

extern char *smiRenderType(SmiType *smiTypePtr, int flags);

#define SMI_RENDER_NUMERIC   0x01 /* render as numeric values */
#define SMI_RENDER_NAME      0x02 /* render as names */
#define SMI_RENDER_QUALIFIED 0x04 /* render names with module prefix */
#define SMI_RENDER_FORMAT    0x08 /* render by applying the type's format if
                 type is given and format is present */
#define SMI_RENDER_PRINTABLE 0x10 /* render string values as a printable
                 string if all octets are isprint() */
#define SMI_RENDER_UNKNOWN   0x20 /* render even unknown items as strings
                   ("<unknown>") so that we never get NULL */
#define SMI_RENDER_ALL       0xff /* render as `human friendly' as possible */

#define SMI_UNKNOWN_LABEL "<unknown>"

   

extern int smiAsprintf(char **strp, const char *format, ...);

extern int smiVasprintf(char **strp, const char *format, va_list ap);

#if ((NCS_NETSNMP != 0) || (NCS_MIBLIB != 0))
extern char *esmiLoadModule(const char *module);
extern int esmiIsTable(SmiNode *smiNode);
extern int esmiGetTblObjNum(SmiNode *grpNode, int *objsLinear);
extern int esmiRowInOneDataStruct(SmiNode *grpNode);
extern int esmiCheckTblIndex(SmiNode *grpNode);
extern int esmiCheckIndexInThisTable(SmiNode *grpNode, int *indexCount);

extern void esmitranslate(char *str);

extern SmiNode *esmiGetRowStatusNode(SmiNode *grpNode);
extern SmiNode *esmiFindObjectByTable(SmiNode *tablePtr, const char *objectName);
extern SmiNode *esmiFindTableByModule(void *modulePtr, const char *tableName, int tableId);
extern SmiNode *esmiFindTableAnyModule(const char *tableName, int tableId);
#endif /* NCS_NETSNMP || NCS_MIBLIB  */

#ifdef __cplusplus
}
#endif


#endif /* _SMI_H */
