
This document describes the implementation status of this release.

High level summary
------------------
Not planned to be implemented in OpenSAF4.0 release:
-SMF API.
-Rollback.

Implemented:
-Rolling upgrade including targetNodeTemplate and targetEntityTemplate.        
-Single step upgrade including actedOn/byTemplate and targetEntutyTemplate.
-Sample implementation of SMF interface commands.

Additional functionality not within the SMF spec:
-Step actions for SW which requires reboot to install e.g. OS
-Step actions for cluster using  e.g. RAM based disks which support queuing of several install/remove 
 orders and one single activation command.
For detialed description of how to trigger the different step types and what actions which are 
included in the steps see the last chapter of this document.

Not implemented:
 see chapters below

Testing:
Tested in UML environment.
Only update of components tested due to limited AMF support.

Detailed description below.
---------------------------
The chapters below refers to the SAI-AIS-SMF-A.01.02 specification.

3 System Description and System Model 
3.2.2.1 Repository Management 
        No bundle import function implemented, manual procedure.
        No bundle remove function implemented, manual procedure.
	No bundle check function implemented, specific for each adaptation.
	For demo purpuses dummy scripts can be found:
	-in devel tree a "OpenSAFroot/services/smfsv/interface_commands"
	-on target at "/usr/local/lib/opensaf/".

3.2.3 Software Installation and Uninstallation
      Implemented. 
      SMF will run installation/revoval commands found in the SaSmfSwBundle 
      object(s) pointed out by the campaign xml file.

      For demo use, dummy installation/removal commands are provided in directory
      "OpenSAFroot/samples/smf" . 
      These commands:
      -offline_install.sh  
      -offline_remove.sh  
      -online_install.sh  
      -online_remove.sh
      must be manually copied to a location pointed out by the SaSmfSwBundle object(s).
      In the sample UML cluster comfiguration (imm.xml) the software bundle will point out
      directory "/hostfs".

3.2.3.1 Ordering of the Operations for Upgrade
	Implemented.

3.2.3.2 Ordering of the Operations for Recovery
	Not implemented.

3.2.4 Software Bundle Object Class 
      Partly implemented. On/offline installation/removal attributes not interpreted as URI's,
      these attributes can currently only contain file pathes.

3.2.5 Entity Types File
      Implemented.

3.3 Software Deployment 
3.3.1 Upgrade Campaign 
3.3.1.1 Upgrade Campaign Model
	Implemented.

3.3.1.1.1 Upgrade Campaign Object Class
	  Implemented.

3.3.1.1.2 Upgrade Procedure Object Class
	  Implemented.

3.3.1.1.3 Upgrade Step Object Class
	  Implemented.

3.3.2 Upgrade Step
3.3.2.1 Deactivation Unit
	Implemented.

3.3.2.2 Activation Unit
	Implemented.

3.3.2.3 Actions of the Upgrade Step
	Implemented.
	Extension: An additional set of actions is introduced to support upgrade of non AMF aware 
	           software e.g. OS and middleware, not implemented.
 
3.3.3 Upgrade Procedure
      Implemented.

3.3.3.1 Upgrade Scope
	Partly implemented. 
	SUs of the same type instantiated on the same node but belonging to different SGs are not
        handled in the same step. 

3.3.3.2 Upgrade Method
3.3.3.2.1 Rolling Upgrade
	  Implemeted

3.3.3.2.2 Single-Step Upgrade
	  Implemented. 

3.3.3.3 Procedure Execution Level
	Implemeted.

3.3.4 Service Outage
      Not implemented.

3.4 Upgrade Periods
3.4.1 Upgrade Procedure Period
      N.A
3.4.2 Upgrade Campaign Period
      N.A.

4 Failure Detection and Failure Handling
4.1 Failure Detection
    Implemented:
    -The Software Management Framework must evaluate the result of each individual
    action performed, such as the success or failure of a CLI operation during an
    upgrade step.
    Not implemeted:
    -The Software Management Framework must evaluate the results reported back
    by registered processes of upgrade-aware entities. These are processes that
    register with the Software Management Framework to be called back during the
    upgrade campaign under certain circumstances (see Section 6.1.1.4).
    -The Software Management Framework must monitor the operational state
    change notifications generated by the Availability Management Framework that
    indicate that the disabled entity was involved in a maintenance campaign.
    -The Software Management Framework may monitor other notifications and
    alarms in the system to correlate them with the actions performed by the campaign.

4.1.1 Upgrade Prerequisites
      Implemented:
      1. The Software Management Framework is operational.
      2. The software repository is accessible.
      3. There is no other upgrade campaign in progress.
      Not implemented:
      4. The currently running version of the software is available in the software repository.
      5. The specifics of the upgrade campaign have been provided, and the campaign is
         still applicable.
      6. The desired version of the software is available in the software repository, and all
         the dependencies of the required packages have been checked and are satisfied.
      7. All affected nodes must provide the resources (for instance, sufficient disk space
         and proper access rights) needed to perform the upgrade campaign.
      8. The target system is in a state such that the expected service outage does not
         exceed the acceptable service outage defined for the campaign.
      9. Upgrade-aware entities are ready for an upgrade campaign.
      10.Any necessary backup is created.

4.1.2 Upgrade Step Verification
      Implemented:
      -Actions that return their result immediately (for instance, CLI commands for the
      installation), and this result is directly applicable to the upgrade step within which
      it is performed (see Section 4.1.5). The Software Management Framework can
      use this return value immediately to decide about the outcome of the upgrade
      step.
      Not implemented:
      -Actions that do not return their result immediately. The Software Management
      Framework needs to rely on the error reports propagated by the Notification Service.
      These notifications and alarms may occur with some delay; therefore, the
      failures they report are referred to as asynchronous failures and are handled at
      the campaign level.

4.1.3 Upgrade Procedure Verification
      Implemented i.e. specified wrapup actions are executed.

4.1.4 Upgrade Campaign Verification
      Implemented i.e. campCompleteAction is executed after the procedures
                       campWrapupAction is executed at commit operation.

4.2 Failure Handling
4.2.1 Protective Measures
      Implemented:
      -Backup. The backup command ia always called in the beginning of an upgrade campaign.
       A reference implementation of a backup command is delivered in OpenSAF. The implementation 
       of the backup command suitable for the actual system must be done by the user.
      Not implemented:
      -Upgrade history.

4.2.1.1 Backup 
	SMF calls the backup command found in the smfConfig object. A reference backup implementation is 
	delivered.

E.g.

# immlist smfConfig=1,safApp=safSmfService
Name                                               Type         Value(s)
========================================================================
smfRepositoryCheckCmd                              SA_STRING_T  /usr/local/lib/opensaf/smf_repository_check 
smfNodeCheckCmd                                    SA_STRING_T  /usr/local/lib/opensaf/smf_node_check 
smfConfig                                          SA_STRING_T  smfConfig=1 
smfClusterRebootCmd                                SA_STRING_T  /usr/local/lib/opensaf/smf_cluster_reboot 
smfCliTimeout                                      SA_TIME_T    600000000000 (0x8bb2c97000, Thu Jan  1 01:10:00 1970)
smfBundleCheckCmd                                  SA_STRING_T  /usr/local/lib/opensaf/smf_bundle_check 
smfBackupCreateCmd                                 SA_STRING_T  /usr/local/lib/opensaf/smf_backup_create 
smfAdminOpTimeout                                  SA_TIME_T    600000000000 (0x8bb2c97000, Thu Jan  1 01:10:00 1970)
SaImmAttrImplementerName                           SA_STRING_T  <Empty>
SaImmAttrClassName                                 SA_STRING_T  SmfConfig 
SaImmAttrAdminOwnerName                            SA_STRING_T  IMMLOADER 

# 

4.2.1.2 Upgrade History
	Not implemented.

4.2.1.3 Detection of Asynchronous Failures of AMF Entities 
	Not implemented.

4.2.1.4 Handling Persistent Changes During Upgrade
	Not implemented.

4.2.1.4.1 Changes Caused by the Upgrade
	No implementation according to spec.

4.2.1.4.2 Changes Caused by Normal Operation
	Not implemented.

4.2.2 Recovery Operations
4.2.2.1 Undoing an Upgrade Step
	Not implemented.

4.2.2.2 Retry of an Upgrade Step
	Not implemented.

4.2.2.3 Rollback
	Not planned to be implemented in OpenSAF4.0 Release.

4.2.2.4 Fallback
	The fallback procedure must be tailor made for each system. A reference implementation is delivered.

4.2.2.4.1 Rollforward
	  Not planned to be implemented in OpenSAF4.0 Release.

5 State Models
5.1 Upgrade Step State Model
5.1.1 Initial State
      Implemented.

5.1.2 Executing State
      Implemented.

5.1.3 Completed State 
      Implemented.

5.1.4 Undoing State
      Not planned to be implemented in OpenSAF4.0 Release.

5.1.5 Failed State
      Implemented.

5.1.6 Undone State
      Not planned to be implemented in OpenSAF4.0 Release.

5.1.7 Rolling Back State
      Not planned to be implemented in OpenSAF4.0 Release.

5.1.8 Undoing Rollback State
      Not planned to be implemented in OpenSAF4.0 Release.

5.1.9 Rolled Back, Rollback Undone and Rollback Failed States
      Not planned to be implemented in OpenSAF4.0 Release.

5.2 Upgrade Procedure State Model
5.2.1 Initial State 
      Implemented.

5.2.2 Executing State
      Implemented.

5.2.3 Suspended and Step Undone States
      Suspended   : implemented.
      Step Undone : Not planned to be implemented in OpenSAF4.0 Release


5.2.4 Completed State
      Implemented.

5.2.5 Rolling Back State
      Not planned to be implemented in OpenSAF4.0 Release.

5.2.6 Rollback Suspended State
      Not planned to be implemented in OpenSAF4.0 Release.

5.2.7 Rolled Back, Failed, and Rollback Failed States
      Rolled Back      : Not planned to be implemented in OpenSAF4.0 Release.
      Failed           : implemented.
      Rollback Failed  : Not planned to be implemented in OpenSAF4.0 Release


5.3 Upgrade Campaign State Model
5.3.1 Initial State
      Implemented.

5.3.2 Executing State
      Implemented.

5.3.3 Execution Completed State
      Implemented.

5.3.4 Error Detected State
      Not planned to be implemented in OpenSAF4.0 Release.

5.3.5 Suspending Execution State
      Implemented.

5.3.6 Error Detected in Suspending State
      Not planned to be implemented in OpenSAF4.0 Release.

5.3.7 Suspended by Error Detected State 
      Not planned to be implemented in OpenSAF4.0 Release.

5.3.8 Execution Suspended State
      Implemented.

5.3.9 Rolling Back State 
      Not planned to be implemented in OpenSAF4.0 Release.

5.3.10 Rollback Completed State
       Not planned to be implemented in OpenSAF4.0 Release.

5.3.11 Suspending Rollback State
       Not planned to be implemented in OpenSAF4.0 Release.

5.3.12 Rollback Suspended State
       Not planned to be implemented in OpenSAF4.0 Release.

5.3.13 Execution Failed and Rollback Failed States
       Execution Failed : implemented.
       Rollback Failed  : Not planned to be implemented in OpenSAF4.0 Release.

5.3.nn Campaign commited, Rollback Commited States
       Campaign commited : implemented.
       Rollback Commited : Not planned to be implemented in OpenSAF4.0 Release.

5.3.14 System Backup, Restart, and Fallback Operations
       Partly implemented.
       SMF calls the backup script when the campaign execution starts.

6 Upgrade Campaign Specification 
6.1.1.1 Administrative Operation
	Impemented.

6.1.1.2 Configuration Change Bundle
	Impemented.

6.1.1.3 CLI Command
	Impemented.

6.1.1.4 Customized Callback Action
        Not planned to be implemented in OpenSAF4.0 Release.

6.1.1.4.1 Timing of Customized Callback Actions
          Not planned to be implemented in OpenSAF4.0 Release.

6.2 Campaign Information 
6.2.1 Campaign Period
      Impemented (value just parsed not used)

6.2.2 Configuration Base
      Not impemented.

6.3 Campaign Initialization
6.3.1 Required Software Bundles
      Not impemented.

6.3.2 New AMF Entity Types
      Impemented.

6.3.3 Initialization Actions
6.3.3.1 Generic Initialization Action
	Impemented:
	-any administrative operation,
	-any Information Model Management Service configuration change bundle(CCB),
	-any CLI command
        Not planned to be implemented in OpenSAF4.0 Release:
	-any customized callback

6.3.3.2 Predefined Conditions for Customized Callback Actions
	Not planned to be implemented in OpenSAF4.0 Release.

6.4 Campaign Body
6.4.1 Outage Information
        Not planned to be implemented in OpenSAF4.0 Release.

6.4.2 Upgrade Method Specification
6.4.2.1 Specification of Rolling Upgrades 
6.4.2.1.1 Target Node
	  Implemented.

6.4.2.1.2 Activation Unit Template
	  Imlemented.
	  Note: If two (or more) SG parent elements are entered. The SUs found will end up in separate
                steps. According to spec the SUs belonging to the differnt SGs shall be acted on in the same step.
                See table 3 row 4 on page 99 in the SMF A.01.02 spec.

SMF implementation we will interpret the parent/type pairs as follows.
In the activationunittemplate in rolling upgrade the following rule is applied:
-a parent followed by a type is always treated as a pair.
E.g.
<activationUnitTemplate>
	<type objectDN="dn=dn1"></type>
	<parent objectDN="dn=dn2"></parent>
	<type objectDN="dn=dn3"></type>
	<parent objectDN="dn=dn4"></parent>
	<parent objectDN="dn=dn5"></parent>
	<type objectDN="dn=dn6"></type>
	<type objectDN="dn=dn7"></type>
</activationUnitTemplate>

Dn1 = single type
Dn2/dn3 = parent/type pair
Dn4 = single parent
Dn5/dn6 = parent/type pair
Dn7 = single type
 
6.4.2.1.3 Target Entities
	  Impemented.
SMF requires the target entity templete to be written as in the examples below:
<targetEntityTemplate>
	<type objectDN="dn=dn1"></type>
	<parent objectDN="dn=dn2"></parent>
        <modifyOperation>
            ...
        </modifyOperation>
</targetEntityTemplate>
<targetEntityTemplate>
	<type objectDN="dn=dn3"></type>
        <modifyOperation>
            ...
        </modifyOperation>
</targetEntityTemplate>
<targetEntityTemplate>
	<parent objectDN="dn=dn4"></type>
        <modifyOperation>
            ...
        </modifyOperation>
</targetEntityTemplate>

6.4.2.1.4 Update Template
	  Impemented.

6.4.2.1.5 Upgrade Step of a Rolling Upgrade
	  Partly mplemented
          Not implemented:
	  -the retry option, which specifies the number of times the upgrade step may be
	   retried in case of failure (Section 4.2.2.2)
	  -the restart option

6.4.2.1.6 Timing of Callback Actions Within the Procedure
          Not planned to be implemented in OpenSAF4.0 Release.

6.4.2.2 Specification of Single-Step Upgrades
6.4.2.2.1 Deactivation Unit Specification
          Partly implemented.
          Not implemented: byTemplate

6.4.2.2.2 Activation Unit Specification
          Implemented.

6.4.2.2.3 Symmetric activation Unit Specification
          Not implemented

6.4.2.2.4 Upgrade Step of a Single-Step Upgrade
          Partly implemented.
          Not planned to be implemented in OpenSAF4.0 Release: customized callbacks.

6.5 Campaign Wrap-Up
6.5.1 Completion of the Upgrade Campaign
      Partly implemented.
      Not implemented: Timers

6.5.2 Committing the Upgrade Campaign
      Partly implemented.
      Not implemented: Timers

7 Entity Types File
7.1 Software Bundle
      Implemented.

7.2 AMF Entity Types
    Implemented.


8 Software Management Framework API
  Not planned to be implemented in OpenSAF4.0 Release.

9 Administrative API
9.3 Software Management Framework Administrative API
9.3.1 SA_SMF_CAMPAIGN_EXECUTE
      Implemented.

9.3.2 SA_SMF_CAMPAIGN_COMMIT
      Implemented.

9.3.3 SA_SMF_CAMPAIGN_SUSPEND
      Partly Implemented. Some minor updates required for robustness.

9.3.4 SA_SMF_CAMPAIGN_ROLLBACK
      Not planned to be implemented in OpenSAF4.0 Release.


10 SMF UML Information Model
10.4.2 Upgrade Campaign, Upgrade Procedure, and Upgrade Step Classes
       Implemented.
10.4.3 SMF Deactivation Unit, Activation Unit, and Image-Nodes Classes
       Implemeted.


11 Alarms and Notifications
11.2 Software Management Framework Alarms
     Implemented (no alarms are sent from SMF).

11.3 Software Management Framework Notifications
11.3.1 Software Management Framework State Change Notifications
11.3.1.1 Upgrade Campaign State Change Notify
	 Implemented.

11.3.1.2 Upgrade Procedure State Change Notify
	 Implemented.

11.3.1.3 Upgrade Step State Change Notify
	 Implemented.



Non standard step implementation
--------------------------------

Besides the two standardized set of actions within a step (standard and reduced) 
additional action sets are provided to make it possible to:
-install SW which requires reboot to install/uninstall
-install SW on e.g. RAM disk based clusters which support prepare and activate functionality.

A) Step actions supporting SW which requires reboot to install/uninstall
   This set of actions are triggerd by the bundle object attributes saSmfBundleInstallOfflineScope
   and saSmfBundleRemoveOfflineScope. If any of these attributes are set to SA_SMF_CMD_SCOPE_PLM_EE(4)
   this set of actions will be entered. 
   The set of actions are as below:
   1)-Online installation of new software (all new bundles)
   2)-Lock deactivation unit
   3)-Terminate deactivation unit
   4)-Offline uninstallation of old software (all old bundles)
   5)-Modify information model and set maintenance status
------inner step-----------
   6)-If any SW bundle to install have the attribute saSmfBundleInstallOfflineScope set to SA_SMF_CMD_SCOPE_PLM_EE
      *reboot node
   7)-If any SW bundle to remove have the attribute saSmfBundleRemoveOfflineScope set to SA_SMF_CMD_SCOPE_PLM_EE
      *Online uninstallation for those bundles.
      *reboot node
------end of inner step----
   8)-Offline installation of new software (all new bundles)
   9)-Instantiate activation unit
  10)-Unlock activation unit
  11)-Online uninstallation (of all old SW bunles which have NOT set the saSmfBundleRemoveOfflineScope 
      to SA_SMF_CMD_SCOPE_PLM_EE)

Note: Typically SW which requires reboot only have online scripts. The procedure above allows steps
      with mixed types of SW bundles. The only addition to the standard set of actions are 6, 7 and modified 11.
      A "reboot" set of actions requires the AU/DU to be on node level.


B) Step actions supporting RAM disk based clusters which support prepare and activate functionality.
   These sets of actions are triggered by the attribute "smfNodeBundleActCmd" in the  SMF configuration 
   object "SmfConfig". If this attribute is set, a new set of actions will be used. The value of the 
   attribute shall point out the command to be used for activation of the queued installation/removal
   tasks.

   Full set of actions for non restartable units:
   1)-Online installation of new software (all new bundles)
   2)-Lock deactivation unit
   3)-Terminate deactivation unit
   4)-Offline uninstallation of old software (all old bundles)
   5)-Modify information model and set maintenance status
   6)-Offline installation of new software (all new bundles)
   7)-Online uninstallation (all old bundles)
   8)-If any SW bundle to install have the attribute saSmfBundleInstallOfflineScope or 
      saSmfBundleRemoveOfflineScope set to SA_SMF_CMD_SCOPE_PLM_EE
         *reboot node (activation is assumed to be a part of the reboot)
      else
         *Activate installations/uninstallations using the command given in the "smfNodeBundleActCmd" attribute.
   9)-Instantiate activation unit
  10)-Unlock activation unit

Note: A "reboot" path requires the AU/DU to be on node level.

   Reduced set of actions for restartable units:
   1)-Online installation of new software (all new bundles)
   2)-Modify information model and set maintenance status
   3)-Online uninstallation (all old bundles)
   4)-Activate installations/uninstallations using the command given in the "smfNodeBundleActCmd" attribute.
   5)-Restart symetric activation unit.