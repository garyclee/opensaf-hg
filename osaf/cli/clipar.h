/*      -*- OpenSAF  -*-
 *
 * (C) Copyright 2008 The OpenSAF Foundation
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
 * under the GNU Lesser General Public License Version 2.1, February 1999.
 * The complete license can be accessed from the following location:
 * http://opensource.org/licenses/lgpl-license.php
 * See the Copying file included with the OpenSAF distribution for full
 * licensing terms.
 *
 * Author(s): Emerson Network Power
 *
 */

/*****************************************************************************
..............................................................................

 MODULE NAME:  CLIPAR.H

..............................................................................

  DESCRIPTION:

  Header file for Netplane Command Language (NCL) Parser and its utility
  functions.

******************************************************************************
*/

#ifndef CLIPAR_H
#define CLIPAR_H

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                Common Include Files.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                        NCL FLEX MACRO/FUNCTION

This section defines the macro/functions that are used by the tokeniser ie FLEX
to tokinse the commands specified in Netplane Command Language(NCL).

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
#define yyparse cli_parse
#define yylex cli_lex
#define yyerror cli_error
#define yylval cli_lval
#define yychar cli_char
#define yydebug cli_debug
#define yynerrs cli_nerrs

/*****************************************************************************
  MACRO NAME:    YY_INPUT(int8 *, int32, int32)

  DESCRIPTION:   Redefine YY_INPUT macro in your source code if you wish to 
                 change how the lexical analyser gets its input. Netplane has 
                 modified the macro to read it from the Netplane Command buffer
                 instead of a file. The default implementation that is provided
                 by Flex reads the input from the file.

  ARGUMENTS:
   int8*         The input buffer that is required by the Flex.
   int32         Number of character copied into the iput buffer of Flex.
   int32         Maximum size of the input buffer of Flex.

  RETURNS: 
   int32         Number of character copied into the iput buffer of Flex.

  NOTES:         Netplane redefines this macro to read it from the Netplane
                 Command Buffer. The content from the Netplane Command Buffer 
                 are read and copied into the Flex input buffer for the Flex 
                 to process the input.
***************************Netplane modified code*****************************
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
{ \
  int32 size;\
                      \
  if(CLI_CMD_BUFFER == lexCli->par_cb.bfrType)\
  {\
      size = strlen(lexCli->par_cb.ipbuffer);\
      if(size < max_size)\
      {\
          memset(buf, 0, max_size);\
          strcpy(buf, lexCli->par_cb.ipbuffer);\
          memset(lexCli->par_cb.ipbuffer, 0, size);\
          result = size;\
      }\
  }\
  else if (CLI_FILE_BUFFER == lexCli->par_cb.bfrType &&\
  ((result = fread( buf, 1, max_size, yyin )) == 0) \
           && ferror( yyin ) ) \
      YY_FATAL_ERROR( "input in flex scanner failed");\
}
#endif
***************************Netplane modified code*****************************
*****************************************************************************/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                        NCL BISON MACRO/FUNCTION

This section defines the macro/functions that are used by the Parser ie BISON
for production rule matching of the tokens that are generated by Flex as per 
Netplane Command Language(NCL) syntax.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

EXTERN_C int yyparse(void);
EXTERN_C uns32 yygettoken(void);
EXTERN_C void yyerror(int8 *);
EXTERN_C void cli_process_token(int32, CLI_TOKEN_RELATION, NCSCLI_TOKEN_TYPE);
EXTERN_C void cli_evaluate_token(NCSCLI_TOKEN_TYPE);
EXTERN_C void cli_pcb_set(CLI_CB *);
EXTERN_C void cli_lcb_set(CLI_CB *);
EXTERN_C void cli_set_token_attrib(CLI_CB *, CLI_CMD_ELEMENT *, CLI_TOKEN_ATTRIB, int8 *);
EXTERN_C void par_log_error(uns32 sel);

#endif
